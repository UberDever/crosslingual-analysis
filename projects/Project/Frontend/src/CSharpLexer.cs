/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.5.1.0
 */
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.IO;
using Hime.Redist;
using Hime.Redist.Lexer;

namespace Csharp
{
	/// <summary>
	/// Represents a lexer
	/// </summary>
	[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
	public class CSharpLexer : ContextSensitiveLexer
	{
		/// <summary>
		/// The automaton for this lexer
		/// </summary>
		private static readonly Automaton commonAutomaton = Automaton.Find(typeof(CSharpLexer), "CSharpLexer.bin");
		/// <summary>
		/// Contains the constant IDs for the terminals for this lexer
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class ID
		{
			/// <summary>
			/// The unique identifier for terminal NEW_LINE
			/// </summary>
			public const int TerminalNewLine = 0x0003;
			/// <summary>
			/// The unique identifier for terminal WHITE_SPACE
			/// </summary>
			public const int TerminalWhiteSpace = 0x0004;
			/// <summary>
			/// The unique identifier for terminal COMMENT_LINE
			/// </summary>
			public const int TerminalCommentLine = 0x0005;
			/// <summary>
			/// The unique identifier for terminal COMMENT_BLOCK
			/// </summary>
			public const int TerminalCommentBlock = 0x0006;
			/// <summary>
			/// The unique identifier for terminal IDENTIFIER
			/// </summary>
			public const int TerminalIdentifier = 0x0007;
			/// <summary>
			/// The unique identifier for terminal INTEGER_LITERAL_DECIMAL
			/// </summary>
			public const int TerminalIntegerLiteralDecimal = 0x0008;
			/// <summary>
			/// The unique identifier for terminal INTEGER_LITERAL_HEXA
			/// </summary>
			public const int TerminalIntegerLiteralHexa = 0x0009;
			/// <summary>
			/// The unique identifier for terminal REAL_LITERAL
			/// </summary>
			public const int TerminalRealLiteral = 0x000A;
			/// <summary>
			/// The unique identifier for terminal CHARACTER_LITERAL
			/// </summary>
			public const int TerminalCharacterLiteral = 0x000B;
			/// <summary>
			/// The unique identifier for terminal REGULAR_STRING_LITERAL
			/// </summary>
			public const int TerminalRegularStringLiteral = 0x000C;
			/// <summary>
			/// The unique identifier for terminal VERBATIM_STRING_LITERAL
			/// </summary>
			public const int TerminalVerbatimStringLiteral = 0x000D;
			/// <summary>
			/// The unique identifier for terminal PP_DIRECTIVES
			/// </summary>
			public const int TerminalPpDirectives = 0x000E;
			/// <summary>
			/// The unique identifier for terminal SEPARATOR
			/// </summary>
			public const int TerminalSeparator = 0x000F;
			/// <summary>
			/// The unique identifier for terminal GET
			/// </summary>
			public const int TerminalGet = 0x0010;
			/// <summary>
			/// The unique identifier for terminal SET
			/// </summary>
			public const int TerminalSet = 0x0011;
		}
		/// <summary>
		/// Contains the constant IDs for the contexts for this lexer
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class Context
		{
			/// <summary>
			/// The unique identifier for the default context
			/// </summary>
			public const int Default = 0;
			/// <summary>
			/// The unique identifier for context accessors
			/// </summary>
			public const int Accessors = 0x0001;
		}
		/// <summary>
		/// The collection of terminals matched by this lexer
		/// </summary>
		/// <remarks>
		/// The terminals are in an order consistent with the automaton,
		/// so that terminal indices in the automaton can be used to retrieve the terminals in this table
		/// </remarks>
		private static readonly Symbol[] terminals = {
			new Symbol(0x0001, "Îµ"),
			new Symbol(0x0002, "$"),
			new Symbol(0x0003, "NEW_LINE"),
			new Symbol(0x0004, "WHITE_SPACE"),
			new Symbol(0x0005, "COMMENT_LINE"),
			new Symbol(0x0006, "COMMENT_BLOCK"),
			new Symbol(0x0007, "IDENTIFIER"),
			new Symbol(0x0008, "INTEGER_LITERAL_DECIMAL"),
			new Symbol(0x0009, "INTEGER_LITERAL_HEXA"),
			new Symbol(0x000A, "REAL_LITERAL"),
			new Symbol(0x000B, "CHARACTER_LITERAL"),
			new Symbol(0x000C, "REGULAR_STRING_LITERAL"),
			new Symbol(0x000D, "VERBATIM_STRING_LITERAL"),
			new Symbol(0x000E, "PP_DIRECTIVES"),
			new Symbol(0x000F, "SEPARATOR"),
			new Symbol(0x0010, "GET"),
			new Symbol(0x0011, "SET"),
			new Symbol(0x0130, "abstract"),
			new Symbol(0x0131, "byte"),
			new Symbol(0x0132, "class"),
			new Symbol(0x0133, "delegate"),
			new Symbol(0x0134, "event"),
			new Symbol(0x0135, "fixed"),
			new Symbol(0x0136, "if"),
			new Symbol(0x0137, "internal"),
			new Symbol(0x0138, "new"),
			new Symbol(0x0139, "override"),
			new Symbol(0x013A, "readonly"),
			new Symbol(0x013B, "short"),
			new Symbol(0x013C, "struct"),
			new Symbol(0x013D, "try"),
			new Symbol(0x013E, "unsafe"),
			new Symbol(0x013F, "volatile"),
			new Symbol(0x0140, "as"),
			new Symbol(0x0141, "case"),
			new Symbol(0x0142, "const"),
			new Symbol(0x0143, "do"),
			new Symbol(0x0144, "explicit"),
			new Symbol(0x0145, "float"),
			new Symbol(0x0146, "implicit"),
			new Symbol(0x0147, "is"),
			new Symbol(0x0148, "null"),
			new Symbol(0x0149, "params"),
			new Symbol(0x014A, "ref"),
			new Symbol(0x014B, "sizeof"),
			new Symbol(0x014C, "switch"),
			new Symbol(0x014D, "typeof"),
			new Symbol(0x014E, "ushort"),
			new Symbol(0x014F, "while"),
			new Symbol(0x0150, "base"),
			new Symbol(0x0151, "catch"),
			new Symbol(0x0152, "continue"),
			new Symbol(0x0153, "double"),
			new Symbol(0x0154, "extern"),
			new Symbol(0x0155, "for"),
			new Symbol(0x0156, "in"),
			new Symbol(0x0157, "lock"),
			new Symbol(0x0158, "object"),
			new Symbol(0x0159, "private"),
			new Symbol(0x015A, "return"),
			new Symbol(0x015B, "stackalloc"),
			new Symbol(0x015C, "this"),
			new Symbol(0x015D, "uint"),
			new Symbol(0x015E, "using"),
			new Symbol(0x015F, "bool"),
			new Symbol(0x0160, "char"),
			new Symbol(0x0161, "decimal"),
			new Symbol(0x0162, "else"),
			new Symbol(0x0163, "false"),
			new Symbol(0x0164, "foreach"),
			new Symbol(0x0165, "int"),
			new Symbol(0x0166, "long"),
			new Symbol(0x0167, "operator"),
			new Symbol(0x0168, "protected"),
			new Symbol(0x0169, "sbyte"),
			new Symbol(0x016A, "static"),
			new Symbol(0x016B, "throw"),
			new Symbol(0x016C, "ulong"),
			new Symbol(0x016D, "virtual"),
			new Symbol(0x016E, "break"),
			new Symbol(0x016F, "checked"),
			new Symbol(0x0170, "default"),
			new Symbol(0x0171, "enum"),
			new Symbol(0x0172, "finally"),
			new Symbol(0x0173, "goto"),
			new Symbol(0x0174, "interface"),
			new Symbol(0x0175, "namespace"),
			new Symbol(0x0176, "out"),
			new Symbol(0x0177, "public"),
			new Symbol(0x0178, "sealed"),
			new Symbol(0x0179, "string"),
			new Symbol(0x017A, "true"),
			new Symbol(0x017B, "unchecked"),
			new Symbol(0x017C, "void"),
			new Symbol(0x017D, ">"),
			new Symbol(0x017E, ">="),
			new Symbol(0x017F, "."),
			new Symbol(0x0180, "?"),
			new Symbol(0x0182, "["),
			new Symbol(0x0183, "]"),
			new Symbol(0x0184, ","),
			new Symbol(0x0187, "("),
			new Symbol(0x0188, ")"),
			new Symbol(0x018A, "++"),
			new Symbol(0x018B, "--"),
			new Symbol(0x018C, "::"),
			new Symbol(0x018D, "<"),
			new Symbol(0x0190, "+"),
			new Symbol(0x0191, "-"),
			new Symbol(0x0192, "~"),
			new Symbol(0x0193, "!"),
			new Symbol(0x0194, "*"),
			new Symbol(0x0195, "/"),
			new Symbol(0x0196, "%"),
			new Symbol(0x0197, "<<"),
			new Symbol(0x0198, "<="),
			new Symbol(0x0199, "=="),
			new Symbol(0x019A, "!="),
			new Symbol(0x019B, "&"),
			new Symbol(0x019C, "^"),
			new Symbol(0x019D, "|"),
			new Symbol(0x019E, "&&"),
			new Symbol(0x019F, "||"),
			new Symbol(0x01A0, "??"),
			new Symbol(0x01A1, ":"),
			new Symbol(0x01A2, "="),
			new Symbol(0x01A3, "+="),
			new Symbol(0x01A4, "-="),
			new Symbol(0x01A5, "*="),
			new Symbol(0x01A6, "/="),
			new Symbol(0x01A7, "%="),
			new Symbol(0x01A8, "&="),
			new Symbol(0x01A9, "|="),
			new Symbol(0x01AA, "^="),
			new Symbol(0x01AB, "<<="),
			new Symbol(0x01AC, "{"),
			new Symbol(0x01AD, "}"),
			new Symbol(0x01AF, ";"),
			new Symbol(0x01B7, "yield"),
			new Symbol(0x01BA, "alias"),
			new Symbol(0x01BD, "partial"),
			new Symbol(0x01CA, "add"),
			new Symbol(0x01CB, "remove"),
			new Symbol(0x01E5, "where"),
			new Symbol(0x01E7, "->") };
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public CSharpLexer(string input) : base(commonAutomaton, terminals, 0x000F, input) {}
		/// <summary>
		/// Initializes a new instance of the lexer
		/// </summary>
		/// <param name="input">The lexer's input</param>
		public CSharpLexer(TextReader input) : base(commonAutomaton, terminals, 0x000F, input) {}
	}
}
