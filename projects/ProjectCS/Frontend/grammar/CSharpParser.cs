/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 3.5.1.0
 */
using System.CodeDom.Compiler;
using System.Collections.Generic;
using Hime.Redist;
using Hime.Redist.Parsers;

namespace Csharp
{
	/// <summary>
	/// Represents a parser
	/// </summary>
	[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
	public class CSharpParser : RNGLRParser
	{
		/// <summary>
		/// The automaton for this parser
		/// </summary>
		private static readonly RNGLRAutomaton commonAutomaton = RNGLRAutomaton.Find(typeof(CSharpParser), "CSharpParser.bin");
		/// <summary>
		/// Contains the constant IDs for the variables and virtuals in this parser
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class ID
		{
			/// <summary>
			/// The unique identifier for variable keyword
			/// </summary>
			public const int VariableKeyword = 0x0012;
			/// <summary>
			/// The unique identifier for variable literal
			/// </summary>
			public const int VariableLiteral = 0x0013;
			/// <summary>
			/// The unique identifier for variable right_shift
			/// </summary>
			public const int VariableRightShift = 0x0014;
			/// <summary>
			/// The unique identifier for variable right_shift_assignment
			/// </summary>
			public const int VariableRightShiftAssignment = 0x0015;
			/// <summary>
			/// The unique identifier for variable compilation_unit
			/// </summary>
			public const int VariableCompilationUnit = 0x0016;
			/// <summary>
			/// The unique identifier for variable namespace_name
			/// </summary>
			public const int VariableNamespaceName = 0x0017;
			/// <summary>
			/// The unique identifier for variable type_name
			/// </summary>
			public const int VariableTypeName = 0x0018;
			/// <summary>
			/// The unique identifier for variable namespace_or_type_name
			/// </summary>
			public const int VariableNamespaceOrTypeName = 0x0019;
			/// <summary>
			/// The unique identifier for variable type
			/// </summary>
			public const int VariableType = 0x001A;
			/// <summary>
			/// The unique identifier for variable value_type
			/// </summary>
			public const int VariableValueType = 0x001B;
			/// <summary>
			/// The unique identifier for variable struct_type
			/// </summary>
			public const int VariableStructType = 0x001C;
			/// <summary>
			/// The unique identifier for variable simple_type
			/// </summary>
			public const int VariableSimpleType = 0x001D;
			/// <summary>
			/// The unique identifier for variable numeric_type
			/// </summary>
			public const int VariableNumericType = 0x001E;
			/// <summary>
			/// The unique identifier for variable integral_type
			/// </summary>
			public const int VariableIntegralType = 0x001F;
			/// <summary>
			/// The unique identifier for variable floating_point_type
			/// </summary>
			public const int VariableFloatingPointType = 0x0020;
			/// <summary>
			/// The unique identifier for variable enum_type
			/// </summary>
			public const int VariableEnumType = 0x0021;
			/// <summary>
			/// The unique identifier for variable nullable_type
			/// </summary>
			public const int VariableNullableType = 0x0022;
			/// <summary>
			/// The unique identifier for variable non_nullable_value_type
			/// </summary>
			public const int VariableNonNullableValueType = 0x0023;
			/// <summary>
			/// The unique identifier for variable reference_type
			/// </summary>
			public const int VariableReferenceType = 0x0024;
			/// <summary>
			/// The unique identifier for variable class_type
			/// </summary>
			public const int VariableClassType = 0x0025;
			/// <summary>
			/// The unique identifier for variable interface_type
			/// </summary>
			public const int VariableInterfaceType = 0x0026;
			/// <summary>
			/// The unique identifier for variable array_type
			/// </summary>
			public const int VariableArrayType = 0x0027;
			/// <summary>
			/// The unique identifier for variable non_array_type
			/// </summary>
			public const int VariableNonArrayType = 0x0028;
			/// <summary>
			/// The unique identifier for variable rank_specifiers
			/// </summary>
			public const int VariableRankSpecifiers = 0x0029;
			/// <summary>
			/// The unique identifier for variable rank_specifier
			/// </summary>
			public const int VariableRankSpecifier = 0x002A;
			/// <summary>
			/// The unique identifier for variable dim_separators
			/// </summary>
			public const int VariableDimSeparators = 0x002B;
			/// <summary>
			/// The unique identifier for variable delegate_type
			/// </summary>
			public const int VariableDelegateType = 0x002C;
			/// <summary>
			/// The unique identifier for variable variable_reference
			/// </summary>
			public const int VariableVariableReference = 0x002D;
			/// <summary>
			/// The unique identifier for variable argument_list
			/// </summary>
			public const int VariableArgumentList = 0x002E;
			/// <summary>
			/// The unique identifier for variable argument
			/// </summary>
			public const int VariableArgument = 0x002F;
			/// <summary>
			/// The unique identifier for variable primary_expression
			/// </summary>
			public const int VariablePrimaryExpression = 0x0030;
			/// <summary>
			/// The unique identifier for variable primary_noarray_creation_expression
			/// </summary>
			public const int VariablePrimaryNoarrayCreationExpression = 0x0031;
			/// <summary>
			/// The unique identifier for variable simple_name
			/// </summary>
			public const int VariableSimpleName = 0x0032;
			/// <summary>
			/// The unique identifier for variable parenthesized_expression
			/// </summary>
			public const int VariableParenthesizedExpression = 0x0033;
			/// <summary>
			/// The unique identifier for variable member_access
			/// </summary>
			public const int VariableMemberAccess = 0x0034;
			/// <summary>
			/// The unique identifier for variable predefined_type
			/// </summary>
			public const int VariablePredefinedType = 0x0035;
			/// <summary>
			/// The unique identifier for variable invocation_expression
			/// </summary>
			public const int VariableInvocationExpression = 0x0036;
			/// <summary>
			/// The unique identifier for variable element_access
			/// </summary>
			public const int VariableElementAccess = 0x0037;
			/// <summary>
			/// The unique identifier for variable expression_list
			/// </summary>
			public const int VariableExpressionList = 0x0038;
			/// <summary>
			/// The unique identifier for variable this_access
			/// </summary>
			public const int VariableThisAccess = 0x0039;
			/// <summary>
			/// The unique identifier for variable base_access
			/// </summary>
			public const int VariableBaseAccess = 0x003A;
			/// <summary>
			/// The unique identifier for variable post_increment_expression
			/// </summary>
			public const int VariablePostIncrementExpression = 0x003B;
			/// <summary>
			/// The unique identifier for variable post_decrement_expression
			/// </summary>
			public const int VariablePostDecrementExpression = 0x003C;
			/// <summary>
			/// The unique identifier for variable object_creation_expression
			/// </summary>
			public const int VariableObjectCreationExpression = 0x003D;
			/// <summary>
			/// The unique identifier for variable array_creation_expression
			/// </summary>
			public const int VariableArrayCreationExpression = 0x003E;
			/// <summary>
			/// The unique identifier for variable delegate_creation_expression
			/// </summary>
			public const int VariableDelegateCreationExpression = 0x003F;
			/// <summary>
			/// The unique identifier for variable typeof_expression
			/// </summary>
			public const int VariableTypeofExpression = 0x0040;
			/// <summary>
			/// The unique identifier for variable unbound_type_name
			/// </summary>
			public const int VariableUnboundTypeName = 0x0041;
			/// <summary>
			/// The unique identifier for variable generic_dimension_specifier
			/// </summary>
			public const int VariableGenericDimensionSpecifier = 0x0042;
			/// <summary>
			/// The unique identifier for variable commas
			/// </summary>
			public const int VariableCommas = 0x0043;
			/// <summary>
			/// The unique identifier for variable checked_expression
			/// </summary>
			public const int VariableCheckedExpression = 0x0044;
			/// <summary>
			/// The unique identifier for variable unchecked_expression
			/// </summary>
			public const int VariableUncheckedExpression = 0x0045;
			/// <summary>
			/// The unique identifier for variable default_value_expression
			/// </summary>
			public const int VariableDefaultValueExpression = 0x0046;
			/// <summary>
			/// The unique identifier for variable anonymous_method_expression
			/// </summary>
			public const int VariableAnonymousMethodExpression = 0x0047;
			/// <summary>
			/// The unique identifier for variable anonymous_method_signature
			/// </summary>
			public const int VariableAnonymousMethodSignature = 0x0048;
			/// <summary>
			/// The unique identifier for variable anonymous_method_parameter_list
			/// </summary>
			public const int VariableAnonymousMethodParameterList = 0x0049;
			/// <summary>
			/// The unique identifier for variable anonymous_method_parameter
			/// </summary>
			public const int VariableAnonymousMethodParameter = 0x004A;
			/// <summary>
			/// The unique identifier for variable unary_expression
			/// </summary>
			public const int VariableUnaryExpression = 0x004B;
			/// <summary>
			/// The unique identifier for variable pre_increment_expression
			/// </summary>
			public const int VariablePreIncrementExpression = 0x004C;
			/// <summary>
			/// The unique identifier for variable pre_decrement_expression
			/// </summary>
			public const int VariablePreDecrementExpression = 0x004D;
			/// <summary>
			/// The unique identifier for variable cast_expression
			/// </summary>
			public const int VariableCastExpression = 0x004E;
			/// <summary>
			/// The unique identifier for variable multiplicative_expression
			/// </summary>
			public const int VariableMultiplicativeExpression = 0x004F;
			/// <summary>
			/// The unique identifier for variable additive_expression
			/// </summary>
			public const int VariableAdditiveExpression = 0x0050;
			/// <summary>
			/// The unique identifier for variable shift_expression
			/// </summary>
			public const int VariableShiftExpression = 0x0051;
			/// <summary>
			/// The unique identifier for variable relational_expression
			/// </summary>
			public const int VariableRelationalExpression = 0x0052;
			/// <summary>
			/// The unique identifier for variable equality_expression
			/// </summary>
			public const int VariableEqualityExpression = 0x0053;
			/// <summary>
			/// The unique identifier for variable and_expression
			/// </summary>
			public const int VariableAndExpression = 0x0054;
			/// <summary>
			/// The unique identifier for variable exclusive_or_expression
			/// </summary>
			public const int VariableExclusiveOrExpression = 0x0055;
			/// <summary>
			/// The unique identifier for variable inclusive_or_expression
			/// </summary>
			public const int VariableInclusiveOrExpression = 0x0056;
			/// <summary>
			/// The unique identifier for variable conditional_and_expression
			/// </summary>
			public const int VariableConditionalAndExpression = 0x0057;
			/// <summary>
			/// The unique identifier for variable conditional_or_expression
			/// </summary>
			public const int VariableConditionalOrExpression = 0x0058;
			/// <summary>
			/// The unique identifier for variable null_coalescing_expression
			/// </summary>
			public const int VariableNullCoalescingExpression = 0x0059;
			/// <summary>
			/// The unique identifier for variable conditional_expression
			/// </summary>
			public const int VariableConditionalExpression = 0x005A;
			/// <summary>
			/// The unique identifier for variable assignment
			/// </summary>
			public const int VariableAssignment = 0x005B;
			/// <summary>
			/// The unique identifier for variable assignment_operator
			/// </summary>
			public const int VariableAssignmentOperator = 0x005C;
			/// <summary>
			/// The unique identifier for variable expression
			/// </summary>
			public const int VariableExpression = 0x005D;
			/// <summary>
			/// The unique identifier for variable constant_expression
			/// </summary>
			public const int VariableConstantExpression = 0x005E;
			/// <summary>
			/// The unique identifier for variable boolean_expression
			/// </summary>
			public const int VariableBooleanExpression = 0x005F;
			/// <summary>
			/// The unique identifier for variable statement
			/// </summary>
			public const int VariableStatement = 0x0060;
			/// <summary>
			/// The unique identifier for variable embedded_statement
			/// </summary>
			public const int VariableEmbeddedStatement = 0x0061;
			/// <summary>
			/// The unique identifier for variable block
			/// </summary>
			public const int VariableBlock = 0x0062;
			/// <summary>
			/// The unique identifier for variable statement_list
			/// </summary>
			public const int VariableStatementList = 0x0063;
			/// <summary>
			/// The unique identifier for variable empty_statement
			/// </summary>
			public const int VariableEmptyStatement = 0x0064;
			/// <summary>
			/// The unique identifier for variable labeled_statement
			/// </summary>
			public const int VariableLabeledStatement = 0x0065;
			/// <summary>
			/// The unique identifier for variable declaration_statement
			/// </summary>
			public const int VariableDeclarationStatement = 0x0066;
			/// <summary>
			/// The unique identifier for variable local_variable_declaration
			/// </summary>
			public const int VariableLocalVariableDeclaration = 0x0067;
			/// <summary>
			/// The unique identifier for variable local_variable_declarators
			/// </summary>
			public const int VariableLocalVariableDeclarators = 0x0068;
			/// <summary>
			/// The unique identifier for variable local_variable_declarator
			/// </summary>
			public const int VariableLocalVariableDeclarator = 0x0069;
			/// <summary>
			/// The unique identifier for variable local_variable_initializer
			/// </summary>
			public const int VariableLocalVariableInitializer = 0x006A;
			/// <summary>
			/// The unique identifier for variable local_constant_declaration
			/// </summary>
			public const int VariableLocalConstantDeclaration = 0x006B;
			/// <summary>
			/// The unique identifier for variable constant_declarators
			/// </summary>
			public const int VariableConstantDeclarators = 0x006C;
			/// <summary>
			/// The unique identifier for variable constant_declarator
			/// </summary>
			public const int VariableConstantDeclarator = 0x006D;
			/// <summary>
			/// The unique identifier for variable expression_statement
			/// </summary>
			public const int VariableExpressionStatement = 0x006E;
			/// <summary>
			/// The unique identifier for variable statement_expression
			/// </summary>
			public const int VariableStatementExpression = 0x006F;
			/// <summary>
			/// The unique identifier for variable selection_statement
			/// </summary>
			public const int VariableSelectionStatement = 0x0070;
			/// <summary>
			/// The unique identifier for variable if_statement
			/// </summary>
			public const int VariableIfStatement = 0x0071;
			/// <summary>
			/// The unique identifier for variable switch_statement
			/// </summary>
			public const int VariableSwitchStatement = 0x0072;
			/// <summary>
			/// The unique identifier for variable switch_block
			/// </summary>
			public const int VariableSwitchBlock = 0x0073;
			/// <summary>
			/// The unique identifier for variable switch_sections
			/// </summary>
			public const int VariableSwitchSections = 0x0074;
			/// <summary>
			/// The unique identifier for variable switch_section
			/// </summary>
			public const int VariableSwitchSection = 0x0075;
			/// <summary>
			/// The unique identifier for variable switch_labels
			/// </summary>
			public const int VariableSwitchLabels = 0x0076;
			/// <summary>
			/// The unique identifier for variable switch_label
			/// </summary>
			public const int VariableSwitchLabel = 0x0077;
			/// <summary>
			/// The unique identifier for variable iteration_statement
			/// </summary>
			public const int VariableIterationStatement = 0x0078;
			/// <summary>
			/// The unique identifier for variable while_statement
			/// </summary>
			public const int VariableWhileStatement = 0x0079;
			/// <summary>
			/// The unique identifier for variable do_statement
			/// </summary>
			public const int VariableDoStatement = 0x007A;
			/// <summary>
			/// The unique identifier for variable for_statement
			/// </summary>
			public const int VariableForStatement = 0x007B;
			/// <summary>
			/// The unique identifier for variable for_initializer
			/// </summary>
			public const int VariableForInitializer = 0x007C;
			/// <summary>
			/// The unique identifier for variable for_condition
			/// </summary>
			public const int VariableForCondition = 0x007D;
			/// <summary>
			/// The unique identifier for variable for_iterator
			/// </summary>
			public const int VariableForIterator = 0x007E;
			/// <summary>
			/// The unique identifier for variable statement_expression_list
			/// </summary>
			public const int VariableStatementExpressionList = 0x007F;
			/// <summary>
			/// The unique identifier for variable foreach_statement
			/// </summary>
			public const int VariableForeachStatement = 0x0080;
			/// <summary>
			/// The unique identifier for variable jump_statement
			/// </summary>
			public const int VariableJumpStatement = 0x0081;
			/// <summary>
			/// The unique identifier for variable break_statement
			/// </summary>
			public const int VariableBreakStatement = 0x0082;
			/// <summary>
			/// The unique identifier for variable continue_statement
			/// </summary>
			public const int VariableContinueStatement = 0x0083;
			/// <summary>
			/// The unique identifier for variable goto_statement
			/// </summary>
			public const int VariableGotoStatement = 0x0084;
			/// <summary>
			/// The unique identifier for variable return_statement
			/// </summary>
			public const int VariableReturnStatement = 0x0085;
			/// <summary>
			/// The unique identifier for variable throw_statement
			/// </summary>
			public const int VariableThrowStatement = 0x0086;
			/// <summary>
			/// The unique identifier for variable try_statement
			/// </summary>
			public const int VariableTryStatement = 0x0087;
			/// <summary>
			/// The unique identifier for variable catch_clauses
			/// </summary>
			public const int VariableCatchClauses = 0x0088;
			/// <summary>
			/// The unique identifier for variable specific_catch_clauses
			/// </summary>
			public const int VariableSpecificCatchClauses = 0x0089;
			/// <summary>
			/// The unique identifier for variable specific_catch_clause
			/// </summary>
			public const int VariableSpecificCatchClause = 0x008A;
			/// <summary>
			/// The unique identifier for variable general_catch_clause
			/// </summary>
			public const int VariableGeneralCatchClause = 0x008B;
			/// <summary>
			/// The unique identifier for variable finally_clause
			/// </summary>
			public const int VariableFinallyClause = 0x008C;
			/// <summary>
			/// The unique identifier for variable checked_statement
			/// </summary>
			public const int VariableCheckedStatement = 0x008D;
			/// <summary>
			/// The unique identifier for variable unchecked_statement
			/// </summary>
			public const int VariableUncheckedStatement = 0x008E;
			/// <summary>
			/// The unique identifier for variable lock_statement
			/// </summary>
			public const int VariableLockStatement = 0x008F;
			/// <summary>
			/// The unique identifier for variable using_statement
			/// </summary>
			public const int VariableUsingStatement = 0x0090;
			/// <summary>
			/// The unique identifier for variable resource_acquisition
			/// </summary>
			public const int VariableResourceAcquisition = 0x0091;
			/// <summary>
			/// The unique identifier for variable yield_statement
			/// </summary>
			public const int VariableYieldStatement = 0x0092;
			/// <summary>
			/// The unique identifier for variable namespace_declaration
			/// </summary>
			public const int VariableNamespaceDeclaration = 0x0093;
			/// <summary>
			/// The unique identifier for variable qualified_identifier
			/// </summary>
			public const int VariableQualifiedIdentifier = 0x0094;
			/// <summary>
			/// The unique identifier for variable namespace_body
			/// </summary>
			public const int VariableNamespaceBody = 0x0095;
			/// <summary>
			/// The unique identifier for variable extern_alias_directives
			/// </summary>
			public const int VariableExternAliasDirectives = 0x0096;
			/// <summary>
			/// The unique identifier for variable extern_alias_directive
			/// </summary>
			public const int VariableExternAliasDirective = 0x0097;
			/// <summary>
			/// The unique identifier for variable using_directives
			/// </summary>
			public const int VariableUsingDirectives = 0x0098;
			/// <summary>
			/// The unique identifier for variable using_directive
			/// </summary>
			public const int VariableUsingDirective = 0x0099;
			/// <summary>
			/// The unique identifier for variable using_alias_directive
			/// </summary>
			public const int VariableUsingAliasDirective = 0x009A;
			/// <summary>
			/// The unique identifier for variable using_namespace_directive
			/// </summary>
			public const int VariableUsingNamespaceDirective = 0x009B;
			/// <summary>
			/// The unique identifier for variable namespace_member_declarations
			/// </summary>
			public const int VariableNamespaceMemberDeclarations = 0x009C;
			/// <summary>
			/// The unique identifier for variable namespace_member_declaration
			/// </summary>
			public const int VariableNamespaceMemberDeclaration = 0x009D;
			/// <summary>
			/// The unique identifier for variable type_declaration
			/// </summary>
			public const int VariableTypeDeclaration = 0x009E;
			/// <summary>
			/// The unique identifier for variable qualified_alias_member
			/// </summary>
			public const int VariableQualifiedAliasMember = 0x009F;
			/// <summary>
			/// The unique identifier for variable class_declaration
			/// </summary>
			public const int VariableClassDeclaration = 0x00A0;
			/// <summary>
			/// The unique identifier for variable class_modifiers
			/// </summary>
			public const int VariableClassModifiers = 0x00A1;
			/// <summary>
			/// The unique identifier for variable class_modifier
			/// </summary>
			public const int VariableClassModifier = 0x00A2;
			/// <summary>
			/// The unique identifier for variable class_base
			/// </summary>
			public const int VariableClassBase = 0x00A3;
			/// <summary>
			/// The unique identifier for variable interface_type_list
			/// </summary>
			public const int VariableInterfaceTypeList = 0x00A4;
			/// <summary>
			/// The unique identifier for variable class_body
			/// </summary>
			public const int VariableClassBody = 0x00A5;
			/// <summary>
			/// The unique identifier for variable class_member_declarations
			/// </summary>
			public const int VariableClassMemberDeclarations = 0x00A6;
			/// <summary>
			/// The unique identifier for variable class_member_declaration
			/// </summary>
			public const int VariableClassMemberDeclaration = 0x00A7;
			/// <summary>
			/// The unique identifier for variable constant_declaration
			/// </summary>
			public const int VariableConstantDeclaration = 0x00A8;
			/// <summary>
			/// The unique identifier for variable constant_modifiers
			/// </summary>
			public const int VariableConstantModifiers = 0x00A9;
			/// <summary>
			/// The unique identifier for variable constant_modifier
			/// </summary>
			public const int VariableConstantModifier = 0x00AA;
			/// <summary>
			/// The unique identifier for variable field_declaration
			/// </summary>
			public const int VariableFieldDeclaration = 0x00AB;
			/// <summary>
			/// The unique identifier for variable field_modifiers
			/// </summary>
			public const int VariableFieldModifiers = 0x00AC;
			/// <summary>
			/// The unique identifier for variable field_modifier
			/// </summary>
			public const int VariableFieldModifier = 0x00AD;
			/// <summary>
			/// The unique identifier for variable variable_declarators
			/// </summary>
			public const int VariableVariableDeclarators = 0x00AE;
			/// <summary>
			/// The unique identifier for variable variable_declarator
			/// </summary>
			public const int VariableVariableDeclarator = 0x00AF;
			/// <summary>
			/// The unique identifier for variable variable_initializer
			/// </summary>
			public const int VariableVariableInitializer = 0x00B0;
			/// <summary>
			/// The unique identifier for variable method_declaration
			/// </summary>
			public const int VariableMethodDeclaration = 0x00B1;
			/// <summary>
			/// The unique identifier for variable method_header
			/// </summary>
			public const int VariableMethodHeader = 0x00B2;
			/// <summary>
			/// The unique identifier for variable method_modifiers
			/// </summary>
			public const int VariableMethodModifiers = 0x00B3;
			/// <summary>
			/// The unique identifier for variable method_modifier
			/// </summary>
			public const int VariableMethodModifier = 0x00B4;
			/// <summary>
			/// The unique identifier for variable return_type
			/// </summary>
			public const int VariableReturnType = 0x00B5;
			/// <summary>
			/// The unique identifier for variable member_name
			/// </summary>
			public const int VariableMemberName = 0x00B6;
			/// <summary>
			/// The unique identifier for variable method_body
			/// </summary>
			public const int VariableMethodBody = 0x00B7;
			/// <summary>
			/// The unique identifier for variable formal_parameter_list
			/// </summary>
			public const int VariableFormalParameterList = 0x00B8;
			/// <summary>
			/// The unique identifier for variable fixed_parameters
			/// </summary>
			public const int VariableFixedParameters = 0x00B9;
			/// <summary>
			/// The unique identifier for variable fixed_parameter
			/// </summary>
			public const int VariableFixedParameter = 0x00BA;
			/// <summary>
			/// The unique identifier for variable parameter_modifier
			/// </summary>
			public const int VariableParameterModifier = 0x00BB;
			/// <summary>
			/// The unique identifier for variable parameter_array
			/// </summary>
			public const int VariableParameterArray = 0x00BC;
			/// <summary>
			/// The unique identifier for variable property_declaration
			/// </summary>
			public const int VariablePropertyDeclaration = 0x00BD;
			/// <summary>
			/// The unique identifier for variable property_modifiers
			/// </summary>
			public const int VariablePropertyModifiers = 0x00BE;
			/// <summary>
			/// The unique identifier for variable property_modifier
			/// </summary>
			public const int VariablePropertyModifier = 0x00BF;
			/// <summary>
			/// The unique identifier for variable accessor_declarations
			/// </summary>
			public const int VariableAccessorDeclarations = 0x00C0;
			/// <summary>
			/// The unique identifier for variable get_accessor_declaration
			/// </summary>
			public const int VariableGetAccessorDeclaration = 0x00C1;
			/// <summary>
			/// The unique identifier for variable set_accessor_declaration
			/// </summary>
			public const int VariableSetAccessorDeclaration = 0x00C2;
			/// <summary>
			/// The unique identifier for variable accessor_modifier
			/// </summary>
			public const int VariableAccessorModifier = 0x00C3;
			/// <summary>
			/// The unique identifier for variable accessor_body
			/// </summary>
			public const int VariableAccessorBody = 0x00C4;
			/// <summary>
			/// The unique identifier for variable event_declaration
			/// </summary>
			public const int VariableEventDeclaration = 0x00C5;
			/// <summary>
			/// The unique identifier for variable event_modifiers
			/// </summary>
			public const int VariableEventModifiers = 0x00C6;
			/// <summary>
			/// The unique identifier for variable event_modifier
			/// </summary>
			public const int VariableEventModifier = 0x00C7;
			/// <summary>
			/// The unique identifier for variable event_accessor_declarations
			/// </summary>
			public const int VariableEventAccessorDeclarations = 0x00C8;
			/// <summary>
			/// The unique identifier for variable add_accessor_declaration
			/// </summary>
			public const int VariableAddAccessorDeclaration = 0x00C9;
			/// <summary>
			/// The unique identifier for variable remove_accessor_declaration
			/// </summary>
			public const int VariableRemoveAccessorDeclaration = 0x00CA;
			/// <summary>
			/// The unique identifier for variable indexer_declaration
			/// </summary>
			public const int VariableIndexerDeclaration = 0x00CB;
			/// <summary>
			/// The unique identifier for variable indexer_modifiers
			/// </summary>
			public const int VariableIndexerModifiers = 0x00CC;
			/// <summary>
			/// The unique identifier for variable indexer_modifier
			/// </summary>
			public const int VariableIndexerModifier = 0x00CD;
			/// <summary>
			/// The unique identifier for variable indexer_declarator
			/// </summary>
			public const int VariableIndexerDeclarator = 0x00CE;
			/// <summary>
			/// The unique identifier for variable operator_declaration
			/// </summary>
			public const int VariableOperatorDeclaration = 0x00CF;
			/// <summary>
			/// The unique identifier for variable operator_modifiers
			/// </summary>
			public const int VariableOperatorModifiers = 0x00D0;
			/// <summary>
			/// The unique identifier for variable operator_modifier
			/// </summary>
			public const int VariableOperatorModifier = 0x00D1;
			/// <summary>
			/// The unique identifier for variable operator_declarator
			/// </summary>
			public const int VariableOperatorDeclarator = 0x00D2;
			/// <summary>
			/// The unique identifier for variable unary_operator_declarator
			/// </summary>
			public const int VariableUnaryOperatorDeclarator = 0x00D3;
			/// <summary>
			/// The unique identifier for variable overloadable_unary_operator
			/// </summary>
			public const int VariableOverloadableUnaryOperator = 0x00D4;
			/// <summary>
			/// The unique identifier for variable binary_operator_declarator
			/// </summary>
			public const int VariableBinaryOperatorDeclarator = 0x00D5;
			/// <summary>
			/// The unique identifier for variable overloadable_binary_operator
			/// </summary>
			public const int VariableOverloadableBinaryOperator = 0x00D6;
			/// <summary>
			/// The unique identifier for variable conversion_operator_declarator
			/// </summary>
			public const int VariableConversionOperatorDeclarator = 0x00D7;
			/// <summary>
			/// The unique identifier for variable operator_body
			/// </summary>
			public const int VariableOperatorBody = 0x00D8;
			/// <summary>
			/// The unique identifier for variable constructor_declaration
			/// </summary>
			public const int VariableConstructorDeclaration = 0x00D9;
			/// <summary>
			/// The unique identifier for variable constructor_modifiers
			/// </summary>
			public const int VariableConstructorModifiers = 0x00DA;
			/// <summary>
			/// The unique identifier for variable constructor_modifier
			/// </summary>
			public const int VariableConstructorModifier = 0x00DB;
			/// <summary>
			/// The unique identifier for variable constructor_declarator
			/// </summary>
			public const int VariableConstructorDeclarator = 0x00DC;
			/// <summary>
			/// The unique identifier for variable constructor_initializer
			/// </summary>
			public const int VariableConstructorInitializer = 0x00DD;
			/// <summary>
			/// The unique identifier for variable constructor_body
			/// </summary>
			public const int VariableConstructorBody = 0x00DE;
			/// <summary>
			/// The unique identifier for variable static_constructor_declaration
			/// </summary>
			public const int VariableStaticConstructorDeclaration = 0x00DF;
			/// <summary>
			/// The unique identifier for variable static_constructor_modifiers
			/// </summary>
			public const int VariableStaticConstructorModifiers = 0x00E0;
			/// <summary>
			/// The unique identifier for variable static_constructor_body
			/// </summary>
			public const int VariableStaticConstructorBody = 0x00E1;
			/// <summary>
			/// The unique identifier for variable finalizer_declaration
			/// </summary>
			public const int VariableFinalizerDeclaration = 0x00E2;
			/// <summary>
			/// The unique identifier for variable finalizer_body
			/// </summary>
			public const int VariableFinalizerBody = 0x00E3;
			/// <summary>
			/// The unique identifier for variable struct_declaration
			/// </summary>
			public const int VariableStructDeclaration = 0x00E4;
			/// <summary>
			/// The unique identifier for variable struct_modifiers
			/// </summary>
			public const int VariableStructModifiers = 0x00E5;
			/// <summary>
			/// The unique identifier for variable struct_modifier
			/// </summary>
			public const int VariableStructModifier = 0x00E6;
			/// <summary>
			/// The unique identifier for variable struct_interfaces
			/// </summary>
			public const int VariableStructInterfaces = 0x00E7;
			/// <summary>
			/// The unique identifier for variable struct_body
			/// </summary>
			public const int VariableStructBody = 0x00E8;
			/// <summary>
			/// The unique identifier for variable struct_member_declarations
			/// </summary>
			public const int VariableStructMemberDeclarations = 0x00E9;
			/// <summary>
			/// The unique identifier for variable struct_member_declaration
			/// </summary>
			public const int VariableStructMemberDeclaration = 0x00EA;
			/// <summary>
			/// The unique identifier for variable array_initializer
			/// </summary>
			public const int VariableArrayInitializer = 0x00EB;
			/// <summary>
			/// The unique identifier for variable variable_initializer_list
			/// </summary>
			public const int VariableVariableInitializerList = 0x00EC;
			/// <summary>
			/// The unique identifier for variable interface_declaration
			/// </summary>
			public const int VariableInterfaceDeclaration = 0x00ED;
			/// <summary>
			/// The unique identifier for variable interface_modifiers
			/// </summary>
			public const int VariableInterfaceModifiers = 0x00EE;
			/// <summary>
			/// The unique identifier for variable interface_modifier
			/// </summary>
			public const int VariableInterfaceModifier = 0x00EF;
			/// <summary>
			/// The unique identifier for variable interface_base
			/// </summary>
			public const int VariableInterfaceBase = 0x00F0;
			/// <summary>
			/// The unique identifier for variable interface_body
			/// </summary>
			public const int VariableInterfaceBody = 0x00F1;
			/// <summary>
			/// The unique identifier for variable interface_member_declarations
			/// </summary>
			public const int VariableInterfaceMemberDeclarations = 0x00F2;
			/// <summary>
			/// The unique identifier for variable interface_member_declaration
			/// </summary>
			public const int VariableInterfaceMemberDeclaration = 0x00F3;
			/// <summary>
			/// The unique identifier for variable interface_method_declaration
			/// </summary>
			public const int VariableInterfaceMethodDeclaration = 0x00F4;
			/// <summary>
			/// The unique identifier for variable interface_property_declaration
			/// </summary>
			public const int VariableInterfacePropertyDeclaration = 0x00F5;
			/// <summary>
			/// The unique identifier for variable interface_accessors
			/// </summary>
			public const int VariableInterfaceAccessors = 0x00F6;
			/// <summary>
			/// The unique identifier for variable interface_event_declaration
			/// </summary>
			public const int VariableInterfaceEventDeclaration = 0x00F7;
			/// <summary>
			/// The unique identifier for variable interface_indexer_declaration
			/// </summary>
			public const int VariableInterfaceIndexerDeclaration = 0x00F8;
			/// <summary>
			/// The unique identifier for variable enum_declaration
			/// </summary>
			public const int VariableEnumDeclaration = 0x00F9;
			/// <summary>
			/// The unique identifier for variable enum_base
			/// </summary>
			public const int VariableEnumBase = 0x00FA;
			/// <summary>
			/// The unique identifier for variable enum_body
			/// </summary>
			public const int VariableEnumBody = 0x00FB;
			/// <summary>
			/// The unique identifier for variable enum_modifiers
			/// </summary>
			public const int VariableEnumModifiers = 0x00FC;
			/// <summary>
			/// The unique identifier for variable enum_modifier
			/// </summary>
			public const int VariableEnumModifier = 0x00FD;
			/// <summary>
			/// The unique identifier for variable enum_member_declarations
			/// </summary>
			public const int VariableEnumMemberDeclarations = 0x00FE;
			/// <summary>
			/// The unique identifier for variable enum_member_declaration
			/// </summary>
			public const int VariableEnumMemberDeclaration = 0x00FF;
			/// <summary>
			/// The unique identifier for variable delegate_declaration
			/// </summary>
			public const int VariableDelegateDeclaration = 0x0100;
			/// <summary>
			/// The unique identifier for variable delegate_modifiers
			/// </summary>
			public const int VariableDelegateModifiers = 0x0101;
			/// <summary>
			/// The unique identifier for variable delegate_modifier
			/// </summary>
			public const int VariableDelegateModifier = 0x0102;
			/// <summary>
			/// The unique identifier for variable global_attributes
			/// </summary>
			public const int VariableGlobalAttributes = 0x0103;
			/// <summary>
			/// The unique identifier for variable global_attribute_sections
			/// </summary>
			public const int VariableGlobalAttributeSections = 0x0104;
			/// <summary>
			/// The unique identifier for variable global_attribute_section
			/// </summary>
			public const int VariableGlobalAttributeSection = 0x0105;
			/// <summary>
			/// The unique identifier for variable global_attribute_target_specifier
			/// </summary>
			public const int VariableGlobalAttributeTargetSpecifier = 0x0106;
			/// <summary>
			/// The unique identifier for variable global_attribute_target
			/// </summary>
			public const int VariableGlobalAttributeTarget = 0x0107;
			/// <summary>
			/// The unique identifier for variable attributes
			/// </summary>
			public const int VariableAttributes = 0x0108;
			/// <summary>
			/// The unique identifier for variable attribute_sections
			/// </summary>
			public const int VariableAttributeSections = 0x0109;
			/// <summary>
			/// The unique identifier for variable attribute_section
			/// </summary>
			public const int VariableAttributeSection = 0x010A;
			/// <summary>
			/// The unique identifier for variable attribute_target_specifier
			/// </summary>
			public const int VariableAttributeTargetSpecifier = 0x010B;
			/// <summary>
			/// The unique identifier for variable attribute_target
			/// </summary>
			public const int VariableAttributeTarget = 0x010C;
			/// <summary>
			/// The unique identifier for variable attribute_list
			/// </summary>
			public const int VariableAttributeList = 0x010D;
			/// <summary>
			/// The unique identifier for variable attribute
			/// </summary>
			public const int VariableAttribute = 0x010E;
			/// <summary>
			/// The unique identifier for variable attribute_name
			/// </summary>
			public const int VariableAttributeName = 0x010F;
			/// <summary>
			/// The unique identifier for variable attribute_arguments
			/// </summary>
			public const int VariableAttributeArguments = 0x0110;
			/// <summary>
			/// The unique identifier for variable positional_argument_list
			/// </summary>
			public const int VariablePositionalArgumentList = 0x0111;
			/// <summary>
			/// The unique identifier for variable positional_argument
			/// </summary>
			public const int VariablePositionalArgument = 0x0112;
			/// <summary>
			/// The unique identifier for variable named_argument_list
			/// </summary>
			public const int VariableNamedArgumentList = 0x0113;
			/// <summary>
			/// The unique identifier for variable named_argument
			/// </summary>
			public const int VariableNamedArgument = 0x0114;
			/// <summary>
			/// The unique identifier for variable attribute_argument_expression
			/// </summary>
			public const int VariableAttributeArgumentExpression = 0x0115;
			/// <summary>
			/// The unique identifier for variable type_parameter_list
			/// </summary>
			public const int VariableTypeParameterList = 0x0116;
			/// <summary>
			/// The unique identifier for variable type_parameters
			/// </summary>
			public const int VariableTypeParameters = 0x0117;
			/// <summary>
			/// The unique identifier for variable type_parameter
			/// </summary>
			public const int VariableTypeParameter = 0x0118;
			/// <summary>
			/// The unique identifier for variable type_argument_list
			/// </summary>
			public const int VariableTypeArgumentList = 0x0119;
			/// <summary>
			/// The unique identifier for variable type_arguments
			/// </summary>
			public const int VariableTypeArguments = 0x011A;
			/// <summary>
			/// The unique identifier for variable type_argument
			/// </summary>
			public const int VariableTypeArgument = 0x011B;
			/// <summary>
			/// The unique identifier for variable type_parameter_constraints_clauses
			/// </summary>
			public const int VariableTypeParameterConstraintsClauses = 0x011C;
			/// <summary>
			/// The unique identifier for variable type_parameter_constraints_clause
			/// </summary>
			public const int VariableTypeParameterConstraintsClause = 0x011D;
			/// <summary>
			/// The unique identifier for variable type_parameter_constraints
			/// </summary>
			public const int VariableTypeParameterConstraints = 0x011E;
			/// <summary>
			/// The unique identifier for variable primary_constraint
			/// </summary>
			public const int VariablePrimaryConstraint = 0x011F;
			/// <summary>
			/// The unique identifier for variable secondary_constraints
			/// </summary>
			public const int VariableSecondaryConstraints = 0x0120;
			/// <summary>
			/// The unique identifier for variable secondary_constraint
			/// </summary>
			public const int VariableSecondaryConstraint = 0x0121;
			/// <summary>
			/// The unique identifier for variable constructor_constraint
			/// </summary>
			public const int VariableConstructorConstraint = 0x0122;
			/// <summary>
			/// The unique identifier for variable unsafe_statement
			/// </summary>
			public const int VariableUnsafeStatement = 0x0123;
			/// <summary>
			/// The unique identifier for variable pointer_type
			/// </summary>
			public const int VariablePointerType = 0x0124;
			/// <summary>
			/// The unique identifier for variable unmanaged_type
			/// </summary>
			public const int VariableUnmanagedType = 0x0125;
			/// <summary>
			/// The unique identifier for variable pointer_indirection_expression
			/// </summary>
			public const int VariablePointerIndirectionExpression = 0x0126;
			/// <summary>
			/// The unique identifier for variable pointer_member_access
			/// </summary>
			public const int VariablePointerMemberAccess = 0x0127;
			/// <summary>
			/// The unique identifier for variable pointer_element_access
			/// </summary>
			public const int VariablePointerElementAccess = 0x0128;
			/// <summary>
			/// The unique identifier for variable adressof_expression
			/// </summary>
			public const int VariableAdressofExpression = 0x0129;
			/// <summary>
			/// The unique identifier for variable sizeof_expression
			/// </summary>
			public const int VariableSizeofExpression = 0x012A;
			/// <summary>
			/// The unique identifier for variable fixed_statement
			/// </summary>
			public const int VariableFixedStatement = 0x012B;
			/// <summary>
			/// The unique identifier for variable fixed_pointer_declarators
			/// </summary>
			public const int VariableFixedPointerDeclarators = 0x012C;
			/// <summary>
			/// The unique identifier for variable fixed_pointer_declarator
			/// </summary>
			public const int VariableFixedPointerDeclarator = 0x012D;
			/// <summary>
			/// The unique identifier for variable fixed_pointer_initializer
			/// </summary>
			public const int VariableFixedPointerInitializer = 0x012E;
			/// <summary>
			/// The unique identifier for variable stackalloc_initializer
			/// </summary>
			public const int VariableStackallocInitializer = 0x012F;
		}
		/// <summary>
		/// The collection of variables matched by this parser
		/// </summary>
		/// <remarks>
		/// The variables are in an order consistent with the automaton,
		/// so that variable indices in the automaton can be used to retrieve the variables in this table
		/// </remarks>
		private static readonly Symbol[] variables = {
			new Symbol(0x0012, "keyword"), 
			new Symbol(0x0013, "literal"), 
			new Symbol(0x0014, "right_shift"), 
			new Symbol(0x0015, "right_shift_assignment"), 
			new Symbol(0x0016, "compilation_unit"), 
			new Symbol(0x0017, "namespace_name"), 
			new Symbol(0x0018, "type_name"), 
			new Symbol(0x0019, "namespace_or_type_name"), 
			new Symbol(0x001A, "type"), 
			new Symbol(0x001B, "value_type"), 
			new Symbol(0x001C, "struct_type"), 
			new Symbol(0x001D, "simple_type"), 
			new Symbol(0x001E, "numeric_type"), 
			new Symbol(0x001F, "integral_type"), 
			new Symbol(0x0020, "floating_point_type"), 
			new Symbol(0x0021, "enum_type"), 
			new Symbol(0x0022, "nullable_type"), 
			new Symbol(0x0023, "non_nullable_value_type"), 
			new Symbol(0x0024, "reference_type"), 
			new Symbol(0x0025, "class_type"), 
			new Symbol(0x0026, "interface_type"), 
			new Symbol(0x0027, "array_type"), 
			new Symbol(0x0028, "non_array_type"), 
			new Symbol(0x0029, "rank_specifiers"), 
			new Symbol(0x002A, "rank_specifier"), 
			new Symbol(0x002B, "dim_separators"), 
			new Symbol(0x002C, "delegate_type"), 
			new Symbol(0x002D, "variable_reference"), 
			new Symbol(0x002E, "argument_list"), 
			new Symbol(0x002F, "argument"), 
			new Symbol(0x0030, "primary_expression"), 
			new Symbol(0x0031, "primary_noarray_creation_expression"), 
			new Symbol(0x0032, "simple_name"), 
			new Symbol(0x0033, "parenthesized_expression"), 
			new Symbol(0x0034, "member_access"), 
			new Symbol(0x0035, "predefined_type"), 
			new Symbol(0x0036, "invocation_expression"), 
			new Symbol(0x0037, "element_access"), 
			new Symbol(0x0038, "expression_list"), 
			new Symbol(0x0039, "this_access"), 
			new Symbol(0x003A, "base_access"), 
			new Symbol(0x003B, "post_increment_expression"), 
			new Symbol(0x003C, "post_decrement_expression"), 
			new Symbol(0x003D, "object_creation_expression"), 
			new Symbol(0x003E, "array_creation_expression"), 
			new Symbol(0x003F, "delegate_creation_expression"), 
			new Symbol(0x0040, "typeof_expression"), 
			new Symbol(0x0041, "unbound_type_name"), 
			new Symbol(0x0042, "generic_dimension_specifier"), 
			new Symbol(0x0043, "commas"), 
			new Symbol(0x0044, "checked_expression"), 
			new Symbol(0x0045, "unchecked_expression"), 
			new Symbol(0x0046, "default_value_expression"), 
			new Symbol(0x0047, "anonymous_method_expression"), 
			new Symbol(0x0048, "anonymous_method_signature"), 
			new Symbol(0x0049, "anonymous_method_parameter_list"), 
			new Symbol(0x004A, "anonymous_method_parameter"), 
			new Symbol(0x004B, "unary_expression"), 
			new Symbol(0x004C, "pre_increment_expression"), 
			new Symbol(0x004D, "pre_decrement_expression"), 
			new Symbol(0x004E, "cast_expression"), 
			new Symbol(0x004F, "multiplicative_expression"), 
			new Symbol(0x0050, "additive_expression"), 
			new Symbol(0x0051, "shift_expression"), 
			new Symbol(0x0052, "relational_expression"), 
			new Symbol(0x0053, "equality_expression"), 
			new Symbol(0x0054, "and_expression"), 
			new Symbol(0x0055, "exclusive_or_expression"), 
			new Symbol(0x0056, "inclusive_or_expression"), 
			new Symbol(0x0057, "conditional_and_expression"), 
			new Symbol(0x0058, "conditional_or_expression"), 
			new Symbol(0x0059, "null_coalescing_expression"), 
			new Symbol(0x005A, "conditional_expression"), 
			new Symbol(0x005B, "assignment"), 
			new Symbol(0x005C, "assignment_operator"), 
			new Symbol(0x005D, "expression"), 
			new Symbol(0x005E, "constant_expression"), 
			new Symbol(0x005F, "boolean_expression"), 
			new Symbol(0x0060, "statement"), 
			new Symbol(0x0061, "embedded_statement"), 
			new Symbol(0x0062, "block"), 
			new Symbol(0x0063, "statement_list"), 
			new Symbol(0x0064, "empty_statement"), 
			new Symbol(0x0065, "labeled_statement"), 
			new Symbol(0x0066, "declaration_statement"), 
			new Symbol(0x0067, "local_variable_declaration"), 
			new Symbol(0x0068, "local_variable_declarators"), 
			new Symbol(0x0069, "local_variable_declarator"), 
			new Symbol(0x006A, "local_variable_initializer"), 
			new Symbol(0x006B, "local_constant_declaration"), 
			new Symbol(0x006C, "constant_declarators"), 
			new Symbol(0x006D, "constant_declarator"), 
			new Symbol(0x006E, "expression_statement"), 
			new Symbol(0x006F, "statement_expression"), 
			new Symbol(0x0070, "selection_statement"), 
			new Symbol(0x0071, "if_statement"), 
			new Symbol(0x0072, "switch_statement"), 
			new Symbol(0x0073, "switch_block"), 
			new Symbol(0x0074, "switch_sections"), 
			new Symbol(0x0075, "switch_section"), 
			new Symbol(0x0076, "switch_labels"), 
			new Symbol(0x0077, "switch_label"), 
			new Symbol(0x0078, "iteration_statement"), 
			new Symbol(0x0079, "while_statement"), 
			new Symbol(0x007A, "do_statement"), 
			new Symbol(0x007B, "for_statement"), 
			new Symbol(0x007C, "for_initializer"), 
			new Symbol(0x007D, "for_condition"), 
			new Symbol(0x007E, "for_iterator"), 
			new Symbol(0x007F, "statement_expression_list"), 
			new Symbol(0x0080, "foreach_statement"), 
			new Symbol(0x0081, "jump_statement"), 
			new Symbol(0x0082, "break_statement"), 
			new Symbol(0x0083, "continue_statement"), 
			new Symbol(0x0084, "goto_statement"), 
			new Symbol(0x0085, "return_statement"), 
			new Symbol(0x0086, "throw_statement"), 
			new Symbol(0x0087, "try_statement"), 
			new Symbol(0x0088, "catch_clauses"), 
			new Symbol(0x0089, "specific_catch_clauses"), 
			new Symbol(0x008A, "specific_catch_clause"), 
			new Symbol(0x008B, "general_catch_clause"), 
			new Symbol(0x008C, "finally_clause"), 
			new Symbol(0x008D, "checked_statement"), 
			new Symbol(0x008E, "unchecked_statement"), 
			new Symbol(0x008F, "lock_statement"), 
			new Symbol(0x0090, "using_statement"), 
			new Symbol(0x0091, "resource_acquisition"), 
			new Symbol(0x0092, "yield_statement"), 
			new Symbol(0x0093, "namespace_declaration"), 
			new Symbol(0x0094, "qualified_identifier"), 
			new Symbol(0x0095, "namespace_body"), 
			new Symbol(0x0096, "extern_alias_directives"), 
			new Symbol(0x0097, "extern_alias_directive"), 
			new Symbol(0x0098, "using_directives"), 
			new Symbol(0x0099, "using_directive"), 
			new Symbol(0x009A, "using_alias_directive"), 
			new Symbol(0x009B, "using_namespace_directive"), 
			new Symbol(0x009C, "namespace_member_declarations"), 
			new Symbol(0x009D, "namespace_member_declaration"), 
			new Symbol(0x009E, "type_declaration"), 
			new Symbol(0x009F, "qualified_alias_member"), 
			new Symbol(0x00A0, "class_declaration"), 
			new Symbol(0x00A1, "class_modifiers"), 
			new Symbol(0x00A2, "class_modifier"), 
			new Symbol(0x00A3, "class_base"), 
			new Symbol(0x00A4, "interface_type_list"), 
			new Symbol(0x00A5, "class_body"), 
			new Symbol(0x00A6, "class_member_declarations"), 
			new Symbol(0x00A7, "class_member_declaration"), 
			new Symbol(0x00A8, "constant_declaration"), 
			new Symbol(0x00A9, "constant_modifiers"), 
			new Symbol(0x00AA, "constant_modifier"), 
			new Symbol(0x00AB, "field_declaration"), 
			new Symbol(0x00AC, "field_modifiers"), 
			new Symbol(0x00AD, "field_modifier"), 
			new Symbol(0x00AE, "variable_declarators"), 
			new Symbol(0x00AF, "variable_declarator"), 
			new Symbol(0x00B0, "variable_initializer"), 
			new Symbol(0x00B1, "method_declaration"), 
			new Symbol(0x00B2, "method_header"), 
			new Symbol(0x00B3, "method_modifiers"), 
			new Symbol(0x00B4, "method_modifier"), 
			new Symbol(0x00B5, "return_type"), 
			new Symbol(0x00B6, "member_name"), 
			new Symbol(0x00B7, "method_body"), 
			new Symbol(0x00B8, "formal_parameter_list"), 
			new Symbol(0x00B9, "fixed_parameters"), 
			new Symbol(0x00BA, "fixed_parameter"), 
			new Symbol(0x00BB, "parameter_modifier"), 
			new Symbol(0x00BC, "parameter_array"), 
			new Symbol(0x00BD, "property_declaration"), 
			new Symbol(0x00BE, "property_modifiers"), 
			new Symbol(0x00BF, "property_modifier"), 
			new Symbol(0x00C0, "accessor_declarations"), 
			new Symbol(0x00C1, "get_accessor_declaration"), 
			new Symbol(0x00C2, "set_accessor_declaration"), 
			new Symbol(0x00C3, "accessor_modifier"), 
			new Symbol(0x00C4, "accessor_body"), 
			new Symbol(0x00C5, "event_declaration"), 
			new Symbol(0x00C6, "event_modifiers"), 
			new Symbol(0x00C7, "event_modifier"), 
			new Symbol(0x00C8, "event_accessor_declarations"), 
			new Symbol(0x00C9, "add_accessor_declaration"), 
			new Symbol(0x00CA, "remove_accessor_declaration"), 
			new Symbol(0x00CB, "indexer_declaration"), 
			new Symbol(0x00CC, "indexer_modifiers"), 
			new Symbol(0x00CD, "indexer_modifier"), 
			new Symbol(0x00CE, "indexer_declarator"), 
			new Symbol(0x00CF, "operator_declaration"), 
			new Symbol(0x00D0, "operator_modifiers"), 
			new Symbol(0x00D1, "operator_modifier"), 
			new Symbol(0x00D2, "operator_declarator"), 
			new Symbol(0x00D3, "unary_operator_declarator"), 
			new Symbol(0x00D4, "overloadable_unary_operator"), 
			new Symbol(0x00D5, "binary_operator_declarator"), 
			new Symbol(0x00D6, "overloadable_binary_operator"), 
			new Symbol(0x00D7, "conversion_operator_declarator"), 
			new Symbol(0x00D8, "operator_body"), 
			new Symbol(0x00D9, "constructor_declaration"), 
			new Symbol(0x00DA, "constructor_modifiers"), 
			new Symbol(0x00DB, "constructor_modifier"), 
			new Symbol(0x00DC, "constructor_declarator"), 
			new Symbol(0x00DD, "constructor_initializer"), 
			new Symbol(0x00DE, "constructor_body"), 
			new Symbol(0x00DF, "static_constructor_declaration"), 
			new Symbol(0x00E0, "static_constructor_modifiers"), 
			new Symbol(0x00E1, "static_constructor_body"), 
			new Symbol(0x00E2, "finalizer_declaration"), 
			new Symbol(0x00E3, "finalizer_body"), 
			new Symbol(0x00E4, "struct_declaration"), 
			new Symbol(0x00E5, "struct_modifiers"), 
			new Symbol(0x00E6, "struct_modifier"), 
			new Symbol(0x00E7, "struct_interfaces"), 
			new Symbol(0x00E8, "struct_body"), 
			new Symbol(0x00E9, "struct_member_declarations"), 
			new Symbol(0x00EA, "struct_member_declaration"), 
			new Symbol(0x00EB, "array_initializer"), 
			new Symbol(0x00EC, "variable_initializer_list"), 
			new Symbol(0x00ED, "interface_declaration"), 
			new Symbol(0x00EE, "interface_modifiers"), 
			new Symbol(0x00EF, "interface_modifier"), 
			new Symbol(0x00F0, "interface_base"), 
			new Symbol(0x00F1, "interface_body"), 
			new Symbol(0x00F2, "interface_member_declarations"), 
			new Symbol(0x00F3, "interface_member_declaration"), 
			new Symbol(0x00F4, "interface_method_declaration"), 
			new Symbol(0x00F5, "interface_property_declaration"), 
			new Symbol(0x00F6, "interface_accessors"), 
			new Symbol(0x00F7, "interface_event_declaration"), 
			new Symbol(0x00F8, "interface_indexer_declaration"), 
			new Symbol(0x00F9, "enum_declaration"), 
			new Symbol(0x00FA, "enum_base"), 
			new Symbol(0x00FB, "enum_body"), 
			new Symbol(0x00FC, "enum_modifiers"), 
			new Symbol(0x00FD, "enum_modifier"), 
			new Symbol(0x00FE, "enum_member_declarations"), 
			new Symbol(0x00FF, "enum_member_declaration"), 
			new Symbol(0x0100, "delegate_declaration"), 
			new Symbol(0x0101, "delegate_modifiers"), 
			new Symbol(0x0102, "delegate_modifier"), 
			new Symbol(0x0103, "global_attributes"), 
			new Symbol(0x0104, "global_attribute_sections"), 
			new Symbol(0x0105, "global_attribute_section"), 
			new Symbol(0x0106, "global_attribute_target_specifier"), 
			new Symbol(0x0107, "global_attribute_target"), 
			new Symbol(0x0108, "attributes"), 
			new Symbol(0x0109, "attribute_sections"), 
			new Symbol(0x010A, "attribute_section"), 
			new Symbol(0x010B, "attribute_target_specifier"), 
			new Symbol(0x010C, "attribute_target"), 
			new Symbol(0x010D, "attribute_list"), 
			new Symbol(0x010E, "attribute"), 
			new Symbol(0x010F, "attribute_name"), 
			new Symbol(0x0110, "attribute_arguments"), 
			new Symbol(0x0111, "positional_argument_list"), 
			new Symbol(0x0112, "positional_argument"), 
			new Symbol(0x0113, "named_argument_list"), 
			new Symbol(0x0114, "named_argument"), 
			new Symbol(0x0115, "attribute_argument_expression"), 
			new Symbol(0x0116, "type_parameter_list"), 
			new Symbol(0x0117, "type_parameters"), 
			new Symbol(0x0118, "type_parameter"), 
			new Symbol(0x0119, "type_argument_list"), 
			new Symbol(0x011A, "type_arguments"), 
			new Symbol(0x011B, "type_argument"), 
			new Symbol(0x011C, "type_parameter_constraints_clauses"), 
			new Symbol(0x011D, "type_parameter_constraints_clause"), 
			new Symbol(0x011E, "type_parameter_constraints"), 
			new Symbol(0x011F, "primary_constraint"), 
			new Symbol(0x0120, "secondary_constraints"), 
			new Symbol(0x0121, "secondary_constraint"), 
			new Symbol(0x0122, "constructor_constraint"), 
			new Symbol(0x0123, "unsafe_statement"), 
			new Symbol(0x0124, "pointer_type"), 
			new Symbol(0x0125, "unmanaged_type"), 
			new Symbol(0x0126, "pointer_indirection_expression"), 
			new Symbol(0x0127, "pointer_member_access"), 
			new Symbol(0x0128, "pointer_element_access"), 
			new Symbol(0x0129, "adressof_expression"), 
			new Symbol(0x012A, "sizeof_expression"), 
			new Symbol(0x012B, "fixed_statement"), 
			new Symbol(0x012C, "fixed_pointer_declarators"), 
			new Symbol(0x012D, "fixed_pointer_declarator"), 
			new Symbol(0x012E, "fixed_pointer_initializer"), 
			new Symbol(0x012F, "stackalloc_initializer"), 
			new Symbol(0x0181, "__V385"), 
			new Symbol(0x0185, "__V389"), 
			new Symbol(0x0186, "__V390"), 
			new Symbol(0x0189, "__V393"), 
			new Symbol(0x018E, "__V398"), 
			new Symbol(0x018F, "__V399"), 
			new Symbol(0x01AE, "__V430"), 
			new Symbol(0x01B0, "__V432"), 
			new Symbol(0x01B1, "__V433"), 
			new Symbol(0x01B2, "__V434"), 
			new Symbol(0x01B3, "__V435"), 
			new Symbol(0x01B4, "__V436"), 
			new Symbol(0x01B5, "__V437"), 
			new Symbol(0x01B6, "__V438"), 
			new Symbol(0x01B8, "__V440"), 
			new Symbol(0x01B9, "__V441"), 
			new Symbol(0x01BB, "__V443"), 
			new Symbol(0x01BC, "__V444"), 
			new Symbol(0x01BE, "__V446"), 
			new Symbol(0x01BF, "__V447"), 
			new Symbol(0x01C0, "__V448"), 
			new Symbol(0x01C1, "__V449"), 
			new Symbol(0x01C2, "__V450"), 
			new Symbol(0x01C3, "__V451"), 
			new Symbol(0x01C4, "__V452"), 
			new Symbol(0x01C5, "__V453"), 
			new Symbol(0x01C6, "__V454"), 
			new Symbol(0x01C7, "__V455"), 
			new Symbol(0x01C8, "__V456"), 
			new Symbol(0x01C9, "__V457"), 
			new Symbol(0x01CC, "__V460"), 
			new Symbol(0x01CD, "__V461"), 
			new Symbol(0x01CE, "__V462"), 
			new Symbol(0x01CF, "__V463"), 
			new Symbol(0x01D0, "__V464"), 
			new Symbol(0x01D1, "__V465"), 
			new Symbol(0x01D2, "__V466"), 
			new Symbol(0x01D3, "__V467"), 
			new Symbol(0x01D4, "__V468"), 
			new Symbol(0x01D5, "__V469"), 
			new Symbol(0x01D6, "__V470"), 
			new Symbol(0x01D7, "__V471"), 
			new Symbol(0x01D8, "__V472"), 
			new Symbol(0x01D9, "__V473"), 
			new Symbol(0x01DA, "__V474"), 
			new Symbol(0x01DB, "__V475"), 
			new Symbol(0x01DC, "__V476"), 
			new Symbol(0x01DD, "__V477"), 
			new Symbol(0x01DE, "__V478"), 
			new Symbol(0x01DF, "__V479"), 
			new Symbol(0x01E0, "__V480"), 
			new Symbol(0x01E1, "__V481"), 
			new Symbol(0x01E2, "__V482"), 
			new Symbol(0x01E3, "__V483"), 
			new Symbol(0x01E4, "__V484"), 
			new Symbol(0x01E6, "__V486"), 
			new Symbol(0x01E8, "__V488"), 
			new Symbol(0x01E9, "__VAxiom") };
		/// <summary>
		/// The collection of virtuals matched by this parser
		/// </summary>
		/// <remarks>
		/// The virtuals are in an order consistent with the automaton,
		/// so that virtual indices in the automaton can be used to retrieve the virtuals in this table
		/// </remarks>
		private static readonly Symbol[] virtuals = {
 };
		/// <summary>
		/// Initializes a new instance of the parser
		/// </summary>
		/// <param name="lexer">The input lexer</param>
		public CSharpParser(CSharpLexer lexer) : base (commonAutomaton, variables, virtuals, null, lexer) { }

		/// <summary>
		/// Visitor interface
		/// </summary>
		[GeneratedCodeAttribute("Hime.SDK", "3.5.1.0")]
		public class Visitor
		{
			public virtual void OnTerminalNewLine(ASTNode node) {}
			public virtual void OnTerminalWhiteSpace(ASTNode node) {}
			public virtual void OnTerminalCommentLine(ASTNode node) {}
			public virtual void OnTerminalCommentBlock(ASTNode node) {}
			public virtual void OnTerminalIdentifier(ASTNode node) {}
			public virtual void OnTerminalIntegerLiteralDecimal(ASTNode node) {}
			public virtual void OnTerminalIntegerLiteralHexa(ASTNode node) {}
			public virtual void OnTerminalRealLiteral(ASTNode node) {}
			public virtual void OnTerminalCharacterLiteral(ASTNode node) {}
			public virtual void OnTerminalRegularStringLiteral(ASTNode node) {}
			public virtual void OnTerminalVerbatimStringLiteral(ASTNode node) {}
			public virtual void OnTerminalPpDirectives(ASTNode node) {}
			public virtual void OnTerminalSeparator(ASTNode node) {}
			public virtual void OnTerminalGet(ASTNode node) {}
			public virtual void OnTerminalSet(ASTNode node) {}
			public virtual void OnVariableKeyword(ASTNode node) {}
			public virtual void OnVariableLiteral(ASTNode node) {}
			public virtual void OnVariableRightShift(ASTNode node) {}
			public virtual void OnVariableRightShiftAssignment(ASTNode node) {}
			public virtual void OnVariableCompilationUnit(ASTNode node) {}
			public virtual void OnVariableNamespaceName(ASTNode node) {}
			public virtual void OnVariableTypeName(ASTNode node) {}
			public virtual void OnVariableNamespaceOrTypeName(ASTNode node) {}
			public virtual void OnVariableType(ASTNode node) {}
			public virtual void OnVariableValueType(ASTNode node) {}
			public virtual void OnVariableStructType(ASTNode node) {}
			public virtual void OnVariableSimpleType(ASTNode node) {}
			public virtual void OnVariableNumericType(ASTNode node) {}
			public virtual void OnVariableIntegralType(ASTNode node) {}
			public virtual void OnVariableFloatingPointType(ASTNode node) {}
			public virtual void OnVariableEnumType(ASTNode node) {}
			public virtual void OnVariableNullableType(ASTNode node) {}
			public virtual void OnVariableNonNullableValueType(ASTNode node) {}
			public virtual void OnVariableReferenceType(ASTNode node) {}
			public virtual void OnVariableClassType(ASTNode node) {}
			public virtual void OnVariableInterfaceType(ASTNode node) {}
			public virtual void OnVariableArrayType(ASTNode node) {}
			public virtual void OnVariableNonArrayType(ASTNode node) {}
			public virtual void OnVariableRankSpecifiers(ASTNode node) {}
			public virtual void OnVariableRankSpecifier(ASTNode node) {}
			public virtual void OnVariableDimSeparators(ASTNode node) {}
			public virtual void OnVariableDelegateType(ASTNode node) {}
			public virtual void OnVariableVariableReference(ASTNode node) {}
			public virtual void OnVariableArgumentList(ASTNode node) {}
			public virtual void OnVariableArgument(ASTNode node) {}
			public virtual void OnVariablePrimaryExpression(ASTNode node) {}
			public virtual void OnVariablePrimaryNoarrayCreationExpression(ASTNode node) {}
			public virtual void OnVariableSimpleName(ASTNode node) {}
			public virtual void OnVariableParenthesizedExpression(ASTNode node) {}
			public virtual void OnVariableMemberAccess(ASTNode node) {}
			public virtual void OnVariablePredefinedType(ASTNode node) {}
			public virtual void OnVariableInvocationExpression(ASTNode node) {}
			public virtual void OnVariableElementAccess(ASTNode node) {}
			public virtual void OnVariableExpressionList(ASTNode node) {}
			public virtual void OnVariableThisAccess(ASTNode node) {}
			public virtual void OnVariableBaseAccess(ASTNode node) {}
			public virtual void OnVariablePostIncrementExpression(ASTNode node) {}
			public virtual void OnVariablePostDecrementExpression(ASTNode node) {}
			public virtual void OnVariableObjectCreationExpression(ASTNode node) {}
			public virtual void OnVariableArrayCreationExpression(ASTNode node) {}
			public virtual void OnVariableDelegateCreationExpression(ASTNode node) {}
			public virtual void OnVariableTypeofExpression(ASTNode node) {}
			public virtual void OnVariableUnboundTypeName(ASTNode node) {}
			public virtual void OnVariableGenericDimensionSpecifier(ASTNode node) {}
			public virtual void OnVariableCommas(ASTNode node) {}
			public virtual void OnVariableCheckedExpression(ASTNode node) {}
			public virtual void OnVariableUncheckedExpression(ASTNode node) {}
			public virtual void OnVariableDefaultValueExpression(ASTNode node) {}
			public virtual void OnVariableAnonymousMethodExpression(ASTNode node) {}
			public virtual void OnVariableAnonymousMethodSignature(ASTNode node) {}
			public virtual void OnVariableAnonymousMethodParameterList(ASTNode node) {}
			public virtual void OnVariableAnonymousMethodParameter(ASTNode node) {}
			public virtual void OnVariableUnaryExpression(ASTNode node) {}
			public virtual void OnVariablePreIncrementExpression(ASTNode node) {}
			public virtual void OnVariablePreDecrementExpression(ASTNode node) {}
			public virtual void OnVariableCastExpression(ASTNode node) {}
			public virtual void OnVariableMultiplicativeExpression(ASTNode node) {}
			public virtual void OnVariableAdditiveExpression(ASTNode node) {}
			public virtual void OnVariableShiftExpression(ASTNode node) {}
			public virtual void OnVariableRelationalExpression(ASTNode node) {}
			public virtual void OnVariableEqualityExpression(ASTNode node) {}
			public virtual void OnVariableAndExpression(ASTNode node) {}
			public virtual void OnVariableExclusiveOrExpression(ASTNode node) {}
			public virtual void OnVariableInclusiveOrExpression(ASTNode node) {}
			public virtual void OnVariableConditionalAndExpression(ASTNode node) {}
			public virtual void OnVariableConditionalOrExpression(ASTNode node) {}
			public virtual void OnVariableNullCoalescingExpression(ASTNode node) {}
			public virtual void OnVariableConditionalExpression(ASTNode node) {}
			public virtual void OnVariableAssignment(ASTNode node) {}
			public virtual void OnVariableAssignmentOperator(ASTNode node) {}
			public virtual void OnVariableExpression(ASTNode node) {}
			public virtual void OnVariableConstantExpression(ASTNode node) {}
			public virtual void OnVariableBooleanExpression(ASTNode node) {}
			public virtual void OnVariableStatement(ASTNode node) {}
			public virtual void OnVariableEmbeddedStatement(ASTNode node) {}
			public virtual void OnVariableBlock(ASTNode node) {}
			public virtual void OnVariableStatementList(ASTNode node) {}
			public virtual void OnVariableEmptyStatement(ASTNode node) {}
			public virtual void OnVariableLabeledStatement(ASTNode node) {}
			public virtual void OnVariableDeclarationStatement(ASTNode node) {}
			public virtual void OnVariableLocalVariableDeclaration(ASTNode node) {}
			public virtual void OnVariableLocalVariableDeclarators(ASTNode node) {}
			public virtual void OnVariableLocalVariableDeclarator(ASTNode node) {}
			public virtual void OnVariableLocalVariableInitializer(ASTNode node) {}
			public virtual void OnVariableLocalConstantDeclaration(ASTNode node) {}
			public virtual void OnVariableConstantDeclarators(ASTNode node) {}
			public virtual void OnVariableConstantDeclarator(ASTNode node) {}
			public virtual void OnVariableExpressionStatement(ASTNode node) {}
			public virtual void OnVariableStatementExpression(ASTNode node) {}
			public virtual void OnVariableSelectionStatement(ASTNode node) {}
			public virtual void OnVariableIfStatement(ASTNode node) {}
			public virtual void OnVariableSwitchStatement(ASTNode node) {}
			public virtual void OnVariableSwitchBlock(ASTNode node) {}
			public virtual void OnVariableSwitchSections(ASTNode node) {}
			public virtual void OnVariableSwitchSection(ASTNode node) {}
			public virtual void OnVariableSwitchLabels(ASTNode node) {}
			public virtual void OnVariableSwitchLabel(ASTNode node) {}
			public virtual void OnVariableIterationStatement(ASTNode node) {}
			public virtual void OnVariableWhileStatement(ASTNode node) {}
			public virtual void OnVariableDoStatement(ASTNode node) {}
			public virtual void OnVariableForStatement(ASTNode node) {}
			public virtual void OnVariableForInitializer(ASTNode node) {}
			public virtual void OnVariableForCondition(ASTNode node) {}
			public virtual void OnVariableForIterator(ASTNode node) {}
			public virtual void OnVariableStatementExpressionList(ASTNode node) {}
			public virtual void OnVariableForeachStatement(ASTNode node) {}
			public virtual void OnVariableJumpStatement(ASTNode node) {}
			public virtual void OnVariableBreakStatement(ASTNode node) {}
			public virtual void OnVariableContinueStatement(ASTNode node) {}
			public virtual void OnVariableGotoStatement(ASTNode node) {}
			public virtual void OnVariableReturnStatement(ASTNode node) {}
			public virtual void OnVariableThrowStatement(ASTNode node) {}
			public virtual void OnVariableTryStatement(ASTNode node) {}
			public virtual void OnVariableCatchClauses(ASTNode node) {}
			public virtual void OnVariableSpecificCatchClauses(ASTNode node) {}
			public virtual void OnVariableSpecificCatchClause(ASTNode node) {}
			public virtual void OnVariableGeneralCatchClause(ASTNode node) {}
			public virtual void OnVariableFinallyClause(ASTNode node) {}
			public virtual void OnVariableCheckedStatement(ASTNode node) {}
			public virtual void OnVariableUncheckedStatement(ASTNode node) {}
			public virtual void OnVariableLockStatement(ASTNode node) {}
			public virtual void OnVariableUsingStatement(ASTNode node) {}
			public virtual void OnVariableResourceAcquisition(ASTNode node) {}
			public virtual void OnVariableYieldStatement(ASTNode node) {}
			public virtual void OnVariableNamespaceDeclaration(ASTNode node) {}
			public virtual void OnVariableQualifiedIdentifier(ASTNode node) {}
			public virtual void OnVariableNamespaceBody(ASTNode node) {}
			public virtual void OnVariableExternAliasDirectives(ASTNode node) {}
			public virtual void OnVariableExternAliasDirective(ASTNode node) {}
			public virtual void OnVariableUsingDirectives(ASTNode node) {}
			public virtual void OnVariableUsingDirective(ASTNode node) {}
			public virtual void OnVariableUsingAliasDirective(ASTNode node) {}
			public virtual void OnVariableUsingNamespaceDirective(ASTNode node) {}
			public virtual void OnVariableNamespaceMemberDeclarations(ASTNode node) {}
			public virtual void OnVariableNamespaceMemberDeclaration(ASTNode node) {}
			public virtual void OnVariableTypeDeclaration(ASTNode node) {}
			public virtual void OnVariableQualifiedAliasMember(ASTNode node) {}
			public virtual void OnVariableClassDeclaration(ASTNode node) {}
			public virtual void OnVariableClassModifiers(ASTNode node) {}
			public virtual void OnVariableClassModifier(ASTNode node) {}
			public virtual void OnVariableClassBase(ASTNode node) {}
			public virtual void OnVariableInterfaceTypeList(ASTNode node) {}
			public virtual void OnVariableClassBody(ASTNode node) {}
			public virtual void OnVariableClassMemberDeclarations(ASTNode node) {}
			public virtual void OnVariableClassMemberDeclaration(ASTNode node) {}
			public virtual void OnVariableConstantDeclaration(ASTNode node) {}
			public virtual void OnVariableConstantModifiers(ASTNode node) {}
			public virtual void OnVariableConstantModifier(ASTNode node) {}
			public virtual void OnVariableFieldDeclaration(ASTNode node) {}
			public virtual void OnVariableFieldModifiers(ASTNode node) {}
			public virtual void OnVariableFieldModifier(ASTNode node) {}
			public virtual void OnVariableVariableDeclarators(ASTNode node) {}
			public virtual void OnVariableVariableDeclarator(ASTNode node) {}
			public virtual void OnVariableVariableInitializer(ASTNode node) {}
			public virtual void OnVariableMethodDeclaration(ASTNode node) {}
			public virtual void OnVariableMethodHeader(ASTNode node) {}
			public virtual void OnVariableMethodModifiers(ASTNode node) {}
			public virtual void OnVariableMethodModifier(ASTNode node) {}
			public virtual void OnVariableReturnType(ASTNode node) {}
			public virtual void OnVariableMemberName(ASTNode node) {}
			public virtual void OnVariableMethodBody(ASTNode node) {}
			public virtual void OnVariableFormalParameterList(ASTNode node) {}
			public virtual void OnVariableFixedParameters(ASTNode node) {}
			public virtual void OnVariableFixedParameter(ASTNode node) {}
			public virtual void OnVariableParameterModifier(ASTNode node) {}
			public virtual void OnVariableParameterArray(ASTNode node) {}
			public virtual void OnVariablePropertyDeclaration(ASTNode node) {}
			public virtual void OnVariablePropertyModifiers(ASTNode node) {}
			public virtual void OnVariablePropertyModifier(ASTNode node) {}
			public virtual void OnVariableAccessorDeclarations(ASTNode node) {}
			public virtual void OnVariableGetAccessorDeclaration(ASTNode node) {}
			public virtual void OnVariableSetAccessorDeclaration(ASTNode node) {}
			public virtual void OnVariableAccessorModifier(ASTNode node) {}
			public virtual void OnVariableAccessorBody(ASTNode node) {}
			public virtual void OnVariableEventDeclaration(ASTNode node) {}
			public virtual void OnVariableEventModifiers(ASTNode node) {}
			public virtual void OnVariableEventModifier(ASTNode node) {}
			public virtual void OnVariableEventAccessorDeclarations(ASTNode node) {}
			public virtual void OnVariableAddAccessorDeclaration(ASTNode node) {}
			public virtual void OnVariableRemoveAccessorDeclaration(ASTNode node) {}
			public virtual void OnVariableIndexerDeclaration(ASTNode node) {}
			public virtual void OnVariableIndexerModifiers(ASTNode node) {}
			public virtual void OnVariableIndexerModifier(ASTNode node) {}
			public virtual void OnVariableIndexerDeclarator(ASTNode node) {}
			public virtual void OnVariableOperatorDeclaration(ASTNode node) {}
			public virtual void OnVariableOperatorModifiers(ASTNode node) {}
			public virtual void OnVariableOperatorModifier(ASTNode node) {}
			public virtual void OnVariableOperatorDeclarator(ASTNode node) {}
			public virtual void OnVariableUnaryOperatorDeclarator(ASTNode node) {}
			public virtual void OnVariableOverloadableUnaryOperator(ASTNode node) {}
			public virtual void OnVariableBinaryOperatorDeclarator(ASTNode node) {}
			public virtual void OnVariableOverloadableBinaryOperator(ASTNode node) {}
			public virtual void OnVariableConversionOperatorDeclarator(ASTNode node) {}
			public virtual void OnVariableOperatorBody(ASTNode node) {}
			public virtual void OnVariableConstructorDeclaration(ASTNode node) {}
			public virtual void OnVariableConstructorModifiers(ASTNode node) {}
			public virtual void OnVariableConstructorModifier(ASTNode node) {}
			public virtual void OnVariableConstructorDeclarator(ASTNode node) {}
			public virtual void OnVariableConstructorInitializer(ASTNode node) {}
			public virtual void OnVariableConstructorBody(ASTNode node) {}
			public virtual void OnVariableStaticConstructorDeclaration(ASTNode node) {}
			public virtual void OnVariableStaticConstructorModifiers(ASTNode node) {}
			public virtual void OnVariableStaticConstructorBody(ASTNode node) {}
			public virtual void OnVariableFinalizerDeclaration(ASTNode node) {}
			public virtual void OnVariableFinalizerBody(ASTNode node) {}
			public virtual void OnVariableStructDeclaration(ASTNode node) {}
			public virtual void OnVariableStructModifiers(ASTNode node) {}
			public virtual void OnVariableStructModifier(ASTNode node) {}
			public virtual void OnVariableStructInterfaces(ASTNode node) {}
			public virtual void OnVariableStructBody(ASTNode node) {}
			public virtual void OnVariableStructMemberDeclarations(ASTNode node) {}
			public virtual void OnVariableStructMemberDeclaration(ASTNode node) {}
			public virtual void OnVariableArrayInitializer(ASTNode node) {}
			public virtual void OnVariableVariableInitializerList(ASTNode node) {}
			public virtual void OnVariableInterfaceDeclaration(ASTNode node) {}
			public virtual void OnVariableInterfaceModifiers(ASTNode node) {}
			public virtual void OnVariableInterfaceModifier(ASTNode node) {}
			public virtual void OnVariableInterfaceBase(ASTNode node) {}
			public virtual void OnVariableInterfaceBody(ASTNode node) {}
			public virtual void OnVariableInterfaceMemberDeclarations(ASTNode node) {}
			public virtual void OnVariableInterfaceMemberDeclaration(ASTNode node) {}
			public virtual void OnVariableInterfaceMethodDeclaration(ASTNode node) {}
			public virtual void OnVariableInterfacePropertyDeclaration(ASTNode node) {}
			public virtual void OnVariableInterfaceAccessors(ASTNode node) {}
			public virtual void OnVariableInterfaceEventDeclaration(ASTNode node) {}
			public virtual void OnVariableInterfaceIndexerDeclaration(ASTNode node) {}
			public virtual void OnVariableEnumDeclaration(ASTNode node) {}
			public virtual void OnVariableEnumBase(ASTNode node) {}
			public virtual void OnVariableEnumBody(ASTNode node) {}
			public virtual void OnVariableEnumModifiers(ASTNode node) {}
			public virtual void OnVariableEnumModifier(ASTNode node) {}
			public virtual void OnVariableEnumMemberDeclarations(ASTNode node) {}
			public virtual void OnVariableEnumMemberDeclaration(ASTNode node) {}
			public virtual void OnVariableDelegateDeclaration(ASTNode node) {}
			public virtual void OnVariableDelegateModifiers(ASTNode node) {}
			public virtual void OnVariableDelegateModifier(ASTNode node) {}
			public virtual void OnVariableGlobalAttributes(ASTNode node) {}
			public virtual void OnVariableGlobalAttributeSections(ASTNode node) {}
			public virtual void OnVariableGlobalAttributeSection(ASTNode node) {}
			public virtual void OnVariableGlobalAttributeTargetSpecifier(ASTNode node) {}
			public virtual void OnVariableGlobalAttributeTarget(ASTNode node) {}
			public virtual void OnVariableAttributes(ASTNode node) {}
			public virtual void OnVariableAttributeSections(ASTNode node) {}
			public virtual void OnVariableAttributeSection(ASTNode node) {}
			public virtual void OnVariableAttributeTargetSpecifier(ASTNode node) {}
			public virtual void OnVariableAttributeTarget(ASTNode node) {}
			public virtual void OnVariableAttributeList(ASTNode node) {}
			public virtual void OnVariableAttribute(ASTNode node) {}
			public virtual void OnVariableAttributeName(ASTNode node) {}
			public virtual void OnVariableAttributeArguments(ASTNode node) {}
			public virtual void OnVariablePositionalArgumentList(ASTNode node) {}
			public virtual void OnVariablePositionalArgument(ASTNode node) {}
			public virtual void OnVariableNamedArgumentList(ASTNode node) {}
			public virtual void OnVariableNamedArgument(ASTNode node) {}
			public virtual void OnVariableAttributeArgumentExpression(ASTNode node) {}
			public virtual void OnVariableTypeParameterList(ASTNode node) {}
			public virtual void OnVariableTypeParameters(ASTNode node) {}
			public virtual void OnVariableTypeParameter(ASTNode node) {}
			public virtual void OnVariableTypeArgumentList(ASTNode node) {}
			public virtual void OnVariableTypeArguments(ASTNode node) {}
			public virtual void OnVariableTypeArgument(ASTNode node) {}
			public virtual void OnVariableTypeParameterConstraintsClauses(ASTNode node) {}
			public virtual void OnVariableTypeParameterConstraintsClause(ASTNode node) {}
			public virtual void OnVariableTypeParameterConstraints(ASTNode node) {}
			public virtual void OnVariablePrimaryConstraint(ASTNode node) {}
			public virtual void OnVariableSecondaryConstraints(ASTNode node) {}
			public virtual void OnVariableSecondaryConstraint(ASTNode node) {}
			public virtual void OnVariableConstructorConstraint(ASTNode node) {}
			public virtual void OnVariableUnsafeStatement(ASTNode node) {}
			public virtual void OnVariablePointerType(ASTNode node) {}
			public virtual void OnVariableUnmanagedType(ASTNode node) {}
			public virtual void OnVariablePointerIndirectionExpression(ASTNode node) {}
			public virtual void OnVariablePointerMemberAccess(ASTNode node) {}
			public virtual void OnVariablePointerElementAccess(ASTNode node) {}
			public virtual void OnVariableAdressofExpression(ASTNode node) {}
			public virtual void OnVariableSizeofExpression(ASTNode node) {}
			public virtual void OnVariableFixedStatement(ASTNode node) {}
			public virtual void OnVariableFixedPointerDeclarators(ASTNode node) {}
			public virtual void OnVariableFixedPointerDeclarator(ASTNode node) {}
			public virtual void OnVariableFixedPointerInitializer(ASTNode node) {}
			public virtual void OnVariableStackallocInitializer(ASTNode node) {}
		}

		/// <summary>
		/// Walk the AST of a result using a visitor
		/// <param name="result">The parse result</param>
		/// <param name="visitor">The visitor to use</param>
		/// </summary>
		public static void Visit(ParseResult result, Visitor visitor)
		{
			VisitASTNode(result.Root, visitor);
		}

		/// <summary>
		/// Walk the sub-AST from the specified node using a visitor
		/// </summary>
		/// <param name="node">The AST node to start from</param>
		/// <param name="visitor">The visitor to use</param>
		public static void VisitASTNode(ASTNode node, Visitor visitor)
		{
			for (int i = 0; i < node.Children.Count; i++)
				VisitASTNode(node.Children[i], visitor);
			switch(node.Symbol.ID)
			{
				case 0x0003: visitor.OnTerminalNewLine(node); break;
				case 0x0004: visitor.OnTerminalWhiteSpace(node); break;
				case 0x0005: visitor.OnTerminalCommentLine(node); break;
				case 0x0006: visitor.OnTerminalCommentBlock(node); break;
				case 0x0007: visitor.OnTerminalIdentifier(node); break;
				case 0x0008: visitor.OnTerminalIntegerLiteralDecimal(node); break;
				case 0x0009: visitor.OnTerminalIntegerLiteralHexa(node); break;
				case 0x000A: visitor.OnTerminalRealLiteral(node); break;
				case 0x000B: visitor.OnTerminalCharacterLiteral(node); break;
				case 0x000C: visitor.OnTerminalRegularStringLiteral(node); break;
				case 0x000D: visitor.OnTerminalVerbatimStringLiteral(node); break;
				case 0x000E: visitor.OnTerminalPpDirectives(node); break;
				case 0x000F: visitor.OnTerminalSeparator(node); break;
				case 0x0010: visitor.OnTerminalGet(node); break;
				case 0x0011: visitor.OnTerminalSet(node); break;
				case 0x0012: visitor.OnVariableKeyword(node); break;
				case 0x0013: visitor.OnVariableLiteral(node); break;
				case 0x0014: visitor.OnVariableRightShift(node); break;
				case 0x0015: visitor.OnVariableRightShiftAssignment(node); break;
				case 0x0016: visitor.OnVariableCompilationUnit(node); break;
				case 0x0017: visitor.OnVariableNamespaceName(node); break;
				case 0x0018: visitor.OnVariableTypeName(node); break;
				case 0x0019: visitor.OnVariableNamespaceOrTypeName(node); break;
				case 0x001A: visitor.OnVariableType(node); break;
				case 0x001B: visitor.OnVariableValueType(node); break;
				case 0x001C: visitor.OnVariableStructType(node); break;
				case 0x001D: visitor.OnVariableSimpleType(node); break;
				case 0x001E: visitor.OnVariableNumericType(node); break;
				case 0x001F: visitor.OnVariableIntegralType(node); break;
				case 0x0020: visitor.OnVariableFloatingPointType(node); break;
				case 0x0021: visitor.OnVariableEnumType(node); break;
				case 0x0022: visitor.OnVariableNullableType(node); break;
				case 0x0023: visitor.OnVariableNonNullableValueType(node); break;
				case 0x0024: visitor.OnVariableReferenceType(node); break;
				case 0x0025: visitor.OnVariableClassType(node); break;
				case 0x0026: visitor.OnVariableInterfaceType(node); break;
				case 0x0027: visitor.OnVariableArrayType(node); break;
				case 0x0028: visitor.OnVariableNonArrayType(node); break;
				case 0x0029: visitor.OnVariableRankSpecifiers(node); break;
				case 0x002A: visitor.OnVariableRankSpecifier(node); break;
				case 0x002B: visitor.OnVariableDimSeparators(node); break;
				case 0x002C: visitor.OnVariableDelegateType(node); break;
				case 0x002D: visitor.OnVariableVariableReference(node); break;
				case 0x002E: visitor.OnVariableArgumentList(node); break;
				case 0x002F: visitor.OnVariableArgument(node); break;
				case 0x0030: visitor.OnVariablePrimaryExpression(node); break;
				case 0x0031: visitor.OnVariablePrimaryNoarrayCreationExpression(node); break;
				case 0x0032: visitor.OnVariableSimpleName(node); break;
				case 0x0033: visitor.OnVariableParenthesizedExpression(node); break;
				case 0x0034: visitor.OnVariableMemberAccess(node); break;
				case 0x0035: visitor.OnVariablePredefinedType(node); break;
				case 0x0036: visitor.OnVariableInvocationExpression(node); break;
				case 0x0037: visitor.OnVariableElementAccess(node); break;
				case 0x0038: visitor.OnVariableExpressionList(node); break;
				case 0x0039: visitor.OnVariableThisAccess(node); break;
				case 0x003A: visitor.OnVariableBaseAccess(node); break;
				case 0x003B: visitor.OnVariablePostIncrementExpression(node); break;
				case 0x003C: visitor.OnVariablePostDecrementExpression(node); break;
				case 0x003D: visitor.OnVariableObjectCreationExpression(node); break;
				case 0x003E: visitor.OnVariableArrayCreationExpression(node); break;
				case 0x003F: visitor.OnVariableDelegateCreationExpression(node); break;
				case 0x0040: visitor.OnVariableTypeofExpression(node); break;
				case 0x0041: visitor.OnVariableUnboundTypeName(node); break;
				case 0x0042: visitor.OnVariableGenericDimensionSpecifier(node); break;
				case 0x0043: visitor.OnVariableCommas(node); break;
				case 0x0044: visitor.OnVariableCheckedExpression(node); break;
				case 0x0045: visitor.OnVariableUncheckedExpression(node); break;
				case 0x0046: visitor.OnVariableDefaultValueExpression(node); break;
				case 0x0047: visitor.OnVariableAnonymousMethodExpression(node); break;
				case 0x0048: visitor.OnVariableAnonymousMethodSignature(node); break;
				case 0x0049: visitor.OnVariableAnonymousMethodParameterList(node); break;
				case 0x004A: visitor.OnVariableAnonymousMethodParameter(node); break;
				case 0x004B: visitor.OnVariableUnaryExpression(node); break;
				case 0x004C: visitor.OnVariablePreIncrementExpression(node); break;
				case 0x004D: visitor.OnVariablePreDecrementExpression(node); break;
				case 0x004E: visitor.OnVariableCastExpression(node); break;
				case 0x004F: visitor.OnVariableMultiplicativeExpression(node); break;
				case 0x0050: visitor.OnVariableAdditiveExpression(node); break;
				case 0x0051: visitor.OnVariableShiftExpression(node); break;
				case 0x0052: visitor.OnVariableRelationalExpression(node); break;
				case 0x0053: visitor.OnVariableEqualityExpression(node); break;
				case 0x0054: visitor.OnVariableAndExpression(node); break;
				case 0x0055: visitor.OnVariableExclusiveOrExpression(node); break;
				case 0x0056: visitor.OnVariableInclusiveOrExpression(node); break;
				case 0x0057: visitor.OnVariableConditionalAndExpression(node); break;
				case 0x0058: visitor.OnVariableConditionalOrExpression(node); break;
				case 0x0059: visitor.OnVariableNullCoalescingExpression(node); break;
				case 0x005A: visitor.OnVariableConditionalExpression(node); break;
				case 0x005B: visitor.OnVariableAssignment(node); break;
				case 0x005C: visitor.OnVariableAssignmentOperator(node); break;
				case 0x005D: visitor.OnVariableExpression(node); break;
				case 0x005E: visitor.OnVariableConstantExpression(node); break;
				case 0x005F: visitor.OnVariableBooleanExpression(node); break;
				case 0x0060: visitor.OnVariableStatement(node); break;
				case 0x0061: visitor.OnVariableEmbeddedStatement(node); break;
				case 0x0062: visitor.OnVariableBlock(node); break;
				case 0x0063: visitor.OnVariableStatementList(node); break;
				case 0x0064: visitor.OnVariableEmptyStatement(node); break;
				case 0x0065: visitor.OnVariableLabeledStatement(node); break;
				case 0x0066: visitor.OnVariableDeclarationStatement(node); break;
				case 0x0067: visitor.OnVariableLocalVariableDeclaration(node); break;
				case 0x0068: visitor.OnVariableLocalVariableDeclarators(node); break;
				case 0x0069: visitor.OnVariableLocalVariableDeclarator(node); break;
				case 0x006A: visitor.OnVariableLocalVariableInitializer(node); break;
				case 0x006B: visitor.OnVariableLocalConstantDeclaration(node); break;
				case 0x006C: visitor.OnVariableConstantDeclarators(node); break;
				case 0x006D: visitor.OnVariableConstantDeclarator(node); break;
				case 0x006E: visitor.OnVariableExpressionStatement(node); break;
				case 0x006F: visitor.OnVariableStatementExpression(node); break;
				case 0x0070: visitor.OnVariableSelectionStatement(node); break;
				case 0x0071: visitor.OnVariableIfStatement(node); break;
				case 0x0072: visitor.OnVariableSwitchStatement(node); break;
				case 0x0073: visitor.OnVariableSwitchBlock(node); break;
				case 0x0074: visitor.OnVariableSwitchSections(node); break;
				case 0x0075: visitor.OnVariableSwitchSection(node); break;
				case 0x0076: visitor.OnVariableSwitchLabels(node); break;
				case 0x0077: visitor.OnVariableSwitchLabel(node); break;
				case 0x0078: visitor.OnVariableIterationStatement(node); break;
				case 0x0079: visitor.OnVariableWhileStatement(node); break;
				case 0x007A: visitor.OnVariableDoStatement(node); break;
				case 0x007B: visitor.OnVariableForStatement(node); break;
				case 0x007C: visitor.OnVariableForInitializer(node); break;
				case 0x007D: visitor.OnVariableForCondition(node); break;
				case 0x007E: visitor.OnVariableForIterator(node); break;
				case 0x007F: visitor.OnVariableStatementExpressionList(node); break;
				case 0x0080: visitor.OnVariableForeachStatement(node); break;
				case 0x0081: visitor.OnVariableJumpStatement(node); break;
				case 0x0082: visitor.OnVariableBreakStatement(node); break;
				case 0x0083: visitor.OnVariableContinueStatement(node); break;
				case 0x0084: visitor.OnVariableGotoStatement(node); break;
				case 0x0085: visitor.OnVariableReturnStatement(node); break;
				case 0x0086: visitor.OnVariableThrowStatement(node); break;
				case 0x0087: visitor.OnVariableTryStatement(node); break;
				case 0x0088: visitor.OnVariableCatchClauses(node); break;
				case 0x0089: visitor.OnVariableSpecificCatchClauses(node); break;
				case 0x008A: visitor.OnVariableSpecificCatchClause(node); break;
				case 0x008B: visitor.OnVariableGeneralCatchClause(node); break;
				case 0x008C: visitor.OnVariableFinallyClause(node); break;
				case 0x008D: visitor.OnVariableCheckedStatement(node); break;
				case 0x008E: visitor.OnVariableUncheckedStatement(node); break;
				case 0x008F: visitor.OnVariableLockStatement(node); break;
				case 0x0090: visitor.OnVariableUsingStatement(node); break;
				case 0x0091: visitor.OnVariableResourceAcquisition(node); break;
				case 0x0092: visitor.OnVariableYieldStatement(node); break;
				case 0x0093: visitor.OnVariableNamespaceDeclaration(node); break;
				case 0x0094: visitor.OnVariableQualifiedIdentifier(node); break;
				case 0x0095: visitor.OnVariableNamespaceBody(node); break;
				case 0x0096: visitor.OnVariableExternAliasDirectives(node); break;
				case 0x0097: visitor.OnVariableExternAliasDirective(node); break;
				case 0x0098: visitor.OnVariableUsingDirectives(node); break;
				case 0x0099: visitor.OnVariableUsingDirective(node); break;
				case 0x009A: visitor.OnVariableUsingAliasDirective(node); break;
				case 0x009B: visitor.OnVariableUsingNamespaceDirective(node); break;
				case 0x009C: visitor.OnVariableNamespaceMemberDeclarations(node); break;
				case 0x009D: visitor.OnVariableNamespaceMemberDeclaration(node); break;
				case 0x009E: visitor.OnVariableTypeDeclaration(node); break;
				case 0x009F: visitor.OnVariableQualifiedAliasMember(node); break;
				case 0x00A0: visitor.OnVariableClassDeclaration(node); break;
				case 0x00A1: visitor.OnVariableClassModifiers(node); break;
				case 0x00A2: visitor.OnVariableClassModifier(node); break;
				case 0x00A3: visitor.OnVariableClassBase(node); break;
				case 0x00A4: visitor.OnVariableInterfaceTypeList(node); break;
				case 0x00A5: visitor.OnVariableClassBody(node); break;
				case 0x00A6: visitor.OnVariableClassMemberDeclarations(node); break;
				case 0x00A7: visitor.OnVariableClassMemberDeclaration(node); break;
				case 0x00A8: visitor.OnVariableConstantDeclaration(node); break;
				case 0x00A9: visitor.OnVariableConstantModifiers(node); break;
				case 0x00AA: visitor.OnVariableConstantModifier(node); break;
				case 0x00AB: visitor.OnVariableFieldDeclaration(node); break;
				case 0x00AC: visitor.OnVariableFieldModifiers(node); break;
				case 0x00AD: visitor.OnVariableFieldModifier(node); break;
				case 0x00AE: visitor.OnVariableVariableDeclarators(node); break;
				case 0x00AF: visitor.OnVariableVariableDeclarator(node); break;
				case 0x00B0: visitor.OnVariableVariableInitializer(node); break;
				case 0x00B1: visitor.OnVariableMethodDeclaration(node); break;
				case 0x00B2: visitor.OnVariableMethodHeader(node); break;
				case 0x00B3: visitor.OnVariableMethodModifiers(node); break;
				case 0x00B4: visitor.OnVariableMethodModifier(node); break;
				case 0x00B5: visitor.OnVariableReturnType(node); break;
				case 0x00B6: visitor.OnVariableMemberName(node); break;
				case 0x00B7: visitor.OnVariableMethodBody(node); break;
				case 0x00B8: visitor.OnVariableFormalParameterList(node); break;
				case 0x00B9: visitor.OnVariableFixedParameters(node); break;
				case 0x00BA: visitor.OnVariableFixedParameter(node); break;
				case 0x00BB: visitor.OnVariableParameterModifier(node); break;
				case 0x00BC: visitor.OnVariableParameterArray(node); break;
				case 0x00BD: visitor.OnVariablePropertyDeclaration(node); break;
				case 0x00BE: visitor.OnVariablePropertyModifiers(node); break;
				case 0x00BF: visitor.OnVariablePropertyModifier(node); break;
				case 0x00C0: visitor.OnVariableAccessorDeclarations(node); break;
				case 0x00C1: visitor.OnVariableGetAccessorDeclaration(node); break;
				case 0x00C2: visitor.OnVariableSetAccessorDeclaration(node); break;
				case 0x00C3: visitor.OnVariableAccessorModifier(node); break;
				case 0x00C4: visitor.OnVariableAccessorBody(node); break;
				case 0x00C5: visitor.OnVariableEventDeclaration(node); break;
				case 0x00C6: visitor.OnVariableEventModifiers(node); break;
				case 0x00C7: visitor.OnVariableEventModifier(node); break;
				case 0x00C8: visitor.OnVariableEventAccessorDeclarations(node); break;
				case 0x00C9: visitor.OnVariableAddAccessorDeclaration(node); break;
				case 0x00CA: visitor.OnVariableRemoveAccessorDeclaration(node); break;
				case 0x00CB: visitor.OnVariableIndexerDeclaration(node); break;
				case 0x00CC: visitor.OnVariableIndexerModifiers(node); break;
				case 0x00CD: visitor.OnVariableIndexerModifier(node); break;
				case 0x00CE: visitor.OnVariableIndexerDeclarator(node); break;
				case 0x00CF: visitor.OnVariableOperatorDeclaration(node); break;
				case 0x00D0: visitor.OnVariableOperatorModifiers(node); break;
				case 0x00D1: visitor.OnVariableOperatorModifier(node); break;
				case 0x00D2: visitor.OnVariableOperatorDeclarator(node); break;
				case 0x00D3: visitor.OnVariableUnaryOperatorDeclarator(node); break;
				case 0x00D4: visitor.OnVariableOverloadableUnaryOperator(node); break;
				case 0x00D5: visitor.OnVariableBinaryOperatorDeclarator(node); break;
				case 0x00D6: visitor.OnVariableOverloadableBinaryOperator(node); break;
				case 0x00D7: visitor.OnVariableConversionOperatorDeclarator(node); break;
				case 0x00D8: visitor.OnVariableOperatorBody(node); break;
				case 0x00D9: visitor.OnVariableConstructorDeclaration(node); break;
				case 0x00DA: visitor.OnVariableConstructorModifiers(node); break;
				case 0x00DB: visitor.OnVariableConstructorModifier(node); break;
				case 0x00DC: visitor.OnVariableConstructorDeclarator(node); break;
				case 0x00DD: visitor.OnVariableConstructorInitializer(node); break;
				case 0x00DE: visitor.OnVariableConstructorBody(node); break;
				case 0x00DF: visitor.OnVariableStaticConstructorDeclaration(node); break;
				case 0x00E0: visitor.OnVariableStaticConstructorModifiers(node); break;
				case 0x00E1: visitor.OnVariableStaticConstructorBody(node); break;
				case 0x00E2: visitor.OnVariableFinalizerDeclaration(node); break;
				case 0x00E3: visitor.OnVariableFinalizerBody(node); break;
				case 0x00E4: visitor.OnVariableStructDeclaration(node); break;
				case 0x00E5: visitor.OnVariableStructModifiers(node); break;
				case 0x00E6: visitor.OnVariableStructModifier(node); break;
				case 0x00E7: visitor.OnVariableStructInterfaces(node); break;
				case 0x00E8: visitor.OnVariableStructBody(node); break;
				case 0x00E9: visitor.OnVariableStructMemberDeclarations(node); break;
				case 0x00EA: visitor.OnVariableStructMemberDeclaration(node); break;
				case 0x00EB: visitor.OnVariableArrayInitializer(node); break;
				case 0x00EC: visitor.OnVariableVariableInitializerList(node); break;
				case 0x00ED: visitor.OnVariableInterfaceDeclaration(node); break;
				case 0x00EE: visitor.OnVariableInterfaceModifiers(node); break;
				case 0x00EF: visitor.OnVariableInterfaceModifier(node); break;
				case 0x00F0: visitor.OnVariableInterfaceBase(node); break;
				case 0x00F1: visitor.OnVariableInterfaceBody(node); break;
				case 0x00F2: visitor.OnVariableInterfaceMemberDeclarations(node); break;
				case 0x00F3: visitor.OnVariableInterfaceMemberDeclaration(node); break;
				case 0x00F4: visitor.OnVariableInterfaceMethodDeclaration(node); break;
				case 0x00F5: visitor.OnVariableInterfacePropertyDeclaration(node); break;
				case 0x00F6: visitor.OnVariableInterfaceAccessors(node); break;
				case 0x00F7: visitor.OnVariableInterfaceEventDeclaration(node); break;
				case 0x00F8: visitor.OnVariableInterfaceIndexerDeclaration(node); break;
				case 0x00F9: visitor.OnVariableEnumDeclaration(node); break;
				case 0x00FA: visitor.OnVariableEnumBase(node); break;
				case 0x00FB: visitor.OnVariableEnumBody(node); break;
				case 0x00FC: visitor.OnVariableEnumModifiers(node); break;
				case 0x00FD: visitor.OnVariableEnumModifier(node); break;
				case 0x00FE: visitor.OnVariableEnumMemberDeclarations(node); break;
				case 0x00FF: visitor.OnVariableEnumMemberDeclaration(node); break;
				case 0x0100: visitor.OnVariableDelegateDeclaration(node); break;
				case 0x0101: visitor.OnVariableDelegateModifiers(node); break;
				case 0x0102: visitor.OnVariableDelegateModifier(node); break;
				case 0x0103: visitor.OnVariableGlobalAttributes(node); break;
				case 0x0104: visitor.OnVariableGlobalAttributeSections(node); break;
				case 0x0105: visitor.OnVariableGlobalAttributeSection(node); break;
				case 0x0106: visitor.OnVariableGlobalAttributeTargetSpecifier(node); break;
				case 0x0107: visitor.OnVariableGlobalAttributeTarget(node); break;
				case 0x0108: visitor.OnVariableAttributes(node); break;
				case 0x0109: visitor.OnVariableAttributeSections(node); break;
				case 0x010A: visitor.OnVariableAttributeSection(node); break;
				case 0x010B: visitor.OnVariableAttributeTargetSpecifier(node); break;
				case 0x010C: visitor.OnVariableAttributeTarget(node); break;
				case 0x010D: visitor.OnVariableAttributeList(node); break;
				case 0x010E: visitor.OnVariableAttribute(node); break;
				case 0x010F: visitor.OnVariableAttributeName(node); break;
				case 0x0110: visitor.OnVariableAttributeArguments(node); break;
				case 0x0111: visitor.OnVariablePositionalArgumentList(node); break;
				case 0x0112: visitor.OnVariablePositionalArgument(node); break;
				case 0x0113: visitor.OnVariableNamedArgumentList(node); break;
				case 0x0114: visitor.OnVariableNamedArgument(node); break;
				case 0x0115: visitor.OnVariableAttributeArgumentExpression(node); break;
				case 0x0116: visitor.OnVariableTypeParameterList(node); break;
				case 0x0117: visitor.OnVariableTypeParameters(node); break;
				case 0x0118: visitor.OnVariableTypeParameter(node); break;
				case 0x0119: visitor.OnVariableTypeArgumentList(node); break;
				case 0x011A: visitor.OnVariableTypeArguments(node); break;
				case 0x011B: visitor.OnVariableTypeArgument(node); break;
				case 0x011C: visitor.OnVariableTypeParameterConstraintsClauses(node); break;
				case 0x011D: visitor.OnVariableTypeParameterConstraintsClause(node); break;
				case 0x011E: visitor.OnVariableTypeParameterConstraints(node); break;
				case 0x011F: visitor.OnVariablePrimaryConstraint(node); break;
				case 0x0120: visitor.OnVariableSecondaryConstraints(node); break;
				case 0x0121: visitor.OnVariableSecondaryConstraint(node); break;
				case 0x0122: visitor.OnVariableConstructorConstraint(node); break;
				case 0x0123: visitor.OnVariableUnsafeStatement(node); break;
				case 0x0124: visitor.OnVariablePointerType(node); break;
				case 0x0125: visitor.OnVariableUnmanagedType(node); break;
				case 0x0126: visitor.OnVariablePointerIndirectionExpression(node); break;
				case 0x0127: visitor.OnVariablePointerMemberAccess(node); break;
				case 0x0128: visitor.OnVariablePointerElementAccess(node); break;
				case 0x0129: visitor.OnVariableAdressofExpression(node); break;
				case 0x012A: visitor.OnVariableSizeofExpression(node); break;
				case 0x012B: visitor.OnVariableFixedStatement(node); break;
				case 0x012C: visitor.OnVariableFixedPointerDeclarators(node); break;
				case 0x012D: visitor.OnVariableFixedPointerDeclarator(node); break;
				case 0x012E: visitor.OnVariableFixedPointerInitializer(node); break;
				case 0x012F: visitor.OnVariableStackallocInitializer(node); break;
			}
		}
	}
}
